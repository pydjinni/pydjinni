{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyDjinni","text":"PyDjinni The C++ Cross-Platform LibraryDevelopment Toolkit. <p> PyDjinni is a tool for generating cross-language type declarations and interface bindings. Heavily inspired by the original Djinni by Dropbox, it's designed to connect C++ with Java, Objective-C and C#. </p> <p>  Get Started\u00a0\u00a0  Discuss  Contribute</p> <p></p> <p> </p> <p></p>"},{"location":"#interface-definition","title":"\ud83d\udcacInterface Definition","text":"<p>The interface to C++ is defined with a custom interface definition language.</p> <pre><code>person = record { # (1)!\n    id: i16;\n    name: str;\n    age: i16;\n}\n\ndatabase = main interface +cpp { # (2)!\n    add(person: person) -&gt; bool;\n    remove(person: person) -&gt; bool;\n    get_persons() -&gt; list&lt;person&gt;;\n}\n</code></pre> <ol> <li>This <code>record</code> defines a custom datatype that can be used to transmit data    from the host language to C++ und vice-versa.</li> <li>This <code>interface</code> defines a class with methods that will be implemented in C++ and can    be called from the host language.</li> </ol>"},{"location":"#configuration","title":"\ud83c\udf9b\ufe0fConfiguration","text":"<p>The output can be configured with a YAML configuration file.</p> <pre><code>generate:\n  list_processed_files: processed-files.json # (1)!\n  cpp:\n    out:\n      header: out/include # (2)!\n      source: out/src\n    namespace: my::lib\n  java:\n    out: out/java\n  jni:\n    out: out/jni\n</code></pre> <ol> <li>A JSON report is generated that lists all input and output files.</li> <li>The target directory for both header and source files can be specified separately</li> </ol>"},{"location":"#modular","title":"\ud83d\udd0cModular","text":"<p>Pydjinni is modular. Additional capabilities can be added through custom plugins.</p>"},{"location":"#toolchain","title":"\ud83d\udd27\ufe0fToolchain","text":"<p>The tool provides additional utilities to help build, package and distribute cross-platform libraries.</p>"},{"location":"#python-api","title":"\ud83d\udc0dPython API","text":"<p>The tool can also be used through a Python API, in order to seamlessly embed into a custom build process.</p>"},{"location":"#roadmap_1","title":"Roadmap","text":"<p>PyDjinni is written completely from scratch and still has some rough edges. Here is what is planned for the near future:</p> <ul> <li> Publish initial preview</li> <li> Add C#/Windows support</li> <li> Add language server (LSP) support</li> <li> Publish IDE plugins</li> <li> Add project setup wizard</li> <li> Add seamless async (coroutine) interaction</li> <li> Add advanced exception translation</li> <li> Increase test coverage</li> <li> Add properties support</li> <li> Add code documentation generator</li> <li> Release stable version 1.0</li> </ul> <p> </p> <p>\u00a0\u00a0Try Now \u00a0  </p>"},{"location":"api/","title":"Programming Interface","text":"<p>PyDjinni has a powerful API that can be used to control the code generation directly from Python:</p> <pre><code>from pydjinni import API\n\nAPI().configure(\"pydjinni.yaml\").parse(\"test.djinni\").generate(\"cpp\").generate(\"java\").write_processed_files()\n</code></pre> <p>is equivalent to running the CLI command:</p> <pre><code>pydjinni generate test.djinni cpp java\n</code></pre>"},{"location":"api/#pydjinni.API.configuration_model","title":"<code>configuration_model</code>  <code>property</code>","text":"<p>The configuration model is assembled dynamically depending on the loaded plugins.</p> <p>Returns:</p> Type Description <code>type[BaseModel]</code> <p>the <code>pydantic</code> model that defines the required configuration structure.</p>"},{"location":"api/#pydjinni.API.external_type_model","title":"<code>external_type_model</code>  <code>property</code>","text":"<p>The type model is assembled dynamically depending on the loaded plugins.</p> <p>Returns:</p> Type Description <code>type[BaseExternalType]</code> <p>The <code>pydantic</code> model that defines the required datastructure for external types.</p>"},{"location":"api/#pydjinni.API.generation_targets","title":"<code>generation_targets</code>  <code>cached</code> <code>property</code>","text":"Caution <p>The returned <code>Target</code> types are not considered part of the stable public API. Internals may change with any release.</p> <p>Returns:     dictionary of all available generator targets.</p>"},{"location":"api/#pydjinni.API.internal_types","title":"<code>internal_types</code>  <code>cached</code> <code>property</code>","text":"<p>Returns:</p> Type Description <code>list</code> <p>A list of all pre-defined types that are available to use in the IDL.</p>"},{"location":"api/#pydjinni.API.processed_files_model","title":"<code>processed_files_model</code>  <code>property</code>","text":"<p>The model for the processed files output is assembled dynamically depending on the loaded plugins.</p> <p>Returns:</p> Type Description <code>type[ProcessedFiles]</code> <p>The <code>pydantic</code> model that defines the datastructure that will be generated by PyDjinni.</p>"},{"location":"api/#pydjinni.API.ConfiguredContext","title":"<code>ConfiguredContext</code>","text":""},{"location":"api/#pydjinni.API.ConfiguredContext.config","title":"<code>config</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>BaseModel</code> <p>The configuration model instance that is used for further processing</p>"},{"location":"api/#pydjinni.API.ConfiguredContext.GenerateContext","title":"<code>GenerateContext</code>","text":""},{"location":"api/#pydjinni.API.ConfiguredContext.GenerateContext.generate","title":"<code>generate(target_name, clean=False)</code>","text":"<p>generate output for a specified target based on the previously parsed IDL. Args:     target_name: name (key) of the target.     clean: if set to <code>True</code>, all output directories are purged before generating output, to make sure            that no leftovers from previous executions are still present.</p> <p>Returns:</p> Type Description <code>GenerateContext</code> <p>the same context. Generation commands can be chained.</p>"},{"location":"api/#pydjinni.API.ConfiguredContext.GenerateContext.write_processed_files","title":"<code>write_processed_files()</code>","text":"<p>write the file that lists all generated files to the path specified in the configuration. If no path is configured, this does nothing. Returns:     Path to the written file.</p>"},{"location":"api/#pydjinni.API.ConfiguredContext.PackageContext","title":"<code>PackageContext</code>","text":""},{"location":"api/#pydjinni.API.ConfiguredContext.PackageContext.build","title":"<code>build(target, architectures=None, clean=False)</code>","text":"<p>Build the library for a given platform target.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>the platform that the library should be built for. Must be supported by the package plugin</p> required <code>architectures</code> <code>set[Architecture]</code> <p>list of architectures that the library should be compiled for. Overrides the             architectures defined in the configuration.</p> <code>None</code> <code>clean</code> <code>bool</code> <p>If <code>True</code>, a clean build is preformed, meaning that the build directory is deleted             and the build is started from scratch.</p> <code>False</code> <p>Returns:     the current context.</p>"},{"location":"api/#pydjinni.API.ConfiguredContext.PackageContext.write_package","title":"<code>write_package(clean=False)</code>","text":"<p>combines all binaries previously built with <code>build()</code> into a package artifact.</p> <p>Parameters:</p> Name Type Description Default <code>clean</code> <code>bool</code> <p>if <code>True</code>, the packaging is done from scratch, deleting the package source directory    and building it from scratch.</p> <code>False</code> <p>Returns:     Path to the final package that has been created</p>"},{"location":"api/#pydjinni.API.ConfiguredContext.package","title":"<code>package(target, configuration=None)</code>","text":"<p>configure a context for package configuration</p> <p>Returns:</p> Name Type Description <code>PackageContext</code> <code>PackageContext</code> <p>the packaging context</p>"},{"location":"api/#pydjinni.API.ConfiguredContext.parse","title":"<code>parse(idl)</code>","text":"<p>Parses the given IDL into an Abstract Syntax tree. Does not generate any file output. Args:     idl: Path to the IDL file that should be processed.</p> <p>Returns:</p> Type Description <code>GenerateContext</code> <p>context that can be used to generate output</p> <p>Raises:     FileNotFoundException            : When the given idl file does not exist.     IdlParser.ParsingException       : When the input could not be parsed.     IdlParser.TypeResolvingException : When a referenced type cannot be found.     IdlParser.DuplicateTypeException : When a type is re-declared.     IdlParser.MarshalException       : When an error happened during marshalling.</p>"},{"location":"api/#pydjinni.API.ConfiguredContext.publish","title":"<code>publish(target, configuration=None)</code>","text":"<p>Publish a previously packaged artifact to an online repository. Depending on the type of package, the repository might vary. This command aims to provide a top-level API to publishing packages no matter what the underlying technology is.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>the package type that should be published</p> required <code>configuration</code> <code>str</code> <p>the configuration that should be used</p> <code>None</code> <p>Raises:     UnknownTargetException if the given target is not known to the system</p>"},{"location":"api/#pydjinni.API.configure","title":"<code>configure(path=None, options=None)</code>","text":"<p>Parses the configuration input.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | str | None</code> <p>the path to a configuration file.</p> <code>None</code> <code>options</code> <code>dict | None</code> <p>a dict with additional configuration parameters.</p> <code>None</code> <p>Returns:</p> Type Description <code>ConfiguredContext</code> <p>configured API context</p> <p>Raises:</p> Type Description <code>ConfigurationException</code> <p>if parsing the configuration has failed</p>"},{"location":"build_plugin/","title":"Build Plugin","text":"<p>To register a build plugin, register the <code>pydjinni.builder</code> entry-point in the plugins <code>pyproject.toml</code>:</p> <pre><code>[project.entry-points.'pydjinni.builder']\nfoo = 'myplugin.foo:FooTarget'\n</code></pre> <p>Pydjinni will now automatically load the plugin, once it is installed.</p>"},{"location":"build_plugin/#target","title":"Target","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"build_plugin/#pydjinni.builder.target.BuildTarget.config_model","title":"<code>config_model</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>The Pydantic model that defines the configuration options for the builder.</p> <p>The model will automatically be registered in the system and is then available in the documentation and as part of the  JSON-Schema for the configuration file.</p>"},{"location":"build_plugin/#pydjinni.builder.target.BuildTarget.key","title":"<code>key</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>The name of the builder. Will be used as configuration key.</p>"},{"location":"build_plugin/#pydjinni.builder.target.BuildTarget.BuildException","title":"<code>BuildException</code>","text":"<p>               Bases: <code>ApplicationException</code></p> <p>Build step failed</p>"},{"location":"cli/","title":"Command Line Interface","text":""},{"location":"cli/#pydjinni","title":"pydjinni","text":"<p>Usage:</p> <pre><code>pydjinni [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--option</code>, <code>-o</code> text Overwrite or extend configuration. Example: <code>-o generate.java.out=java_out</code> None <code>--config</code>, <code>-c</code> Path Path to the config file. Set to <code>None</code> if no config should be parsed. File format is determined based on the file extension. Supported extensions: <code>.yaml</code>, <code>.yml</code>, <code>.json</code>, <code>.toml</code> <code>pydjinni.yaml</code> <code>--log-level</code>, <code>-l</code> choice (<code>debug</code> | <code>info</code> | <code>warn</code> | <code>error</code>) Log level <code>info</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#generate","title":"generate","text":"<p>Generate glue-code from the provided IDL file.</p> <p>COMMAND specifies the target languages.</p> <p>Usage:</p> <pre><code>pydjinni generate [OPTIONS] IDL COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--clean</code> boolean If enabled, deletes all specified output directories before generating new output. Caution: This deletes the entire output folders, including all files that are inside it! <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#cpp","title":"cpp","text":"<p>Generate C++ interfaces.</p> <p>Usage:</p> <pre><code>pydjinni generate IDL cpp [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#cppcli","title":"cppcli","text":"<p>Generate C++/CLI interfaces.</p> <p>Usage:</p> <pre><code>pydjinni generate IDL cppcli [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#java","title":"java","text":"<p>Generate Java interface and JNI gluecode.</p> <p>This target generates a public Java interface as well as the required JNI gluecode to interact with the C++ interface.</p> <p>Usage:</p> <pre><code>pydjinni generate IDL java [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#objc","title":"objc","text":"<p>Generate Objective-C interface and Objective-C++ gluecode.</p> <p>The output of this can also be used to interface with Swift, when the bridging-header generation is enabled.</p> <p>Usage:</p> <pre><code>pydjinni generate IDL objc [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#yaml","title":"yaml","text":"<p>Generate YAML type interfaces.</p> <p>Usage:</p> <pre><code>pydjinni generate IDL yaml [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#package","title":"package","text":"<p>Bundle an artifact for distribution.</p> <p>Usage:</p> <pre><code>pydjinni package [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--configuration</code> text The build configuration of the resulting package and all contained binaries None <code>--clean</code> boolean If enabled, deletes all used build directories before building new output. Caution: This deletes the entire folders, including all files that are inside it! <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#aar","title":"aar","text":"<p>Android Archive</p> <p>Usage:</p> <pre><code>pydjinni package aar [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#android","title":"android","text":"<p>Usage:</p> <pre><code>pydjinni package aar android [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--arch</code> choice (<code>x86</code> | <code>x86_64</code> | <code>armv7</code> | <code>armv8</code>) Architectures that the library should be built for. Overrides the defaults configured in the configuration file. None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#nuget","title":"nuget","text":"<p>NuGet Package</p> <p>Usage:</p> <pre><code>pydjinni package nuget [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#windows","title":"windows","text":"<p>Usage:</p> <pre><code>pydjinni package nuget windows [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--arch</code> choice (<code>x86</code> | <code>x86_64</code> | <code>armv7</code> | <code>armv8</code>) Architectures that the library should be built for. Overrides the defaults configured in the configuration file. None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#swiftpackage","title":"swiftpackage","text":"<p>Swift package</p> <p>Usage:</p> <pre><code>pydjinni package swiftpackage [OPTIONS] COMMAND1 [ARGS]... [COMMAND2\n                              [ARGS]...]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#ios","title":"ios","text":"<p>Usage:</p> <pre><code>pydjinni package swiftpackage ios [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--arch</code> choice (<code>armv8</code>) Architectures that the library should be built for. Overrides the defaults configured in the configuration file. None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#ios_simulator","title":"ios_simulator","text":"<p>Usage:</p> <pre><code>pydjinni package swiftpackage ios_simulator [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--arch</code> choice (<code>x86_64</code> | <code>armv8</code>) Architectures that the library should be built for. Overrides the defaults configured in the configuration file. None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#macos","title":"macos","text":"<p>Usage:</p> <pre><code>pydjinni package swiftpackage macos [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--arch</code> choice (<code>x86_64</code> | <code>armv8</code>) Architectures that the library should be built for. Overrides the defaults configured in the configuration file. None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#publish","title":"publish","text":"<p>Publish an artifact to a registry/repository.</p> <p>Usage:</p> <pre><code>pydjinni publish [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--configuration</code> text The build configuration that should be published None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#aar_1","title":"aar","text":"<p>Android Archive</p> <p>Usage:</p> <pre><code>pydjinni publish aar [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#nuget_1","title":"nuget","text":"<p>NuGet Package</p> <p>Usage:</p> <pre><code>pydjinni publish nuget [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#swiftpackage_1","title":"swiftpackage","text":"<p>Swift package</p> <p>Usage:</p> <pre><code>pydjinni publish swiftpackage [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#return-codes","title":"Return Codes","text":"<p>In the event of an error, the CLI tries to provide a helpful return code for further error handling in addition to the  error message.</p> Code Description 2 The file or directory could not be found 120 Unknown target 130 External command execution has failed 140 Parsing input has failed 141 Error loading the configuration 150 IDL Parsing error 160 Generation error 161 Invalid identifier 170 Type resolving error 180 Build step failed"},{"location":"cmake/","title":"CMake","text":"<p>PyDjinni comes with a CMake module that allows for easy integration of the interface generation in a CMake project configuration.</p>"},{"location":"cmake/#synopsis","title":"Synopsis","text":"<pre><code>pydjinni_generate(&lt;filename&gt;\n    LANGUAGES &lt;cpp|cppcli|java|objc|yaml&gt; [cpp|cppcli|java|objc|yaml ...]\n    [CONFIG &lt;config&gt;]\n    [OPTIONS &lt;options&gt;]\n    [WORKING_DIRECTORY &lt;workdir&gt;]\n)\n</code></pre> <p>Calls the PyDjinni Generator and populates variables with the generated sources</p> <p>The output variables are named <code>&lt;language&gt;_GENERATED_SOURCES</code>, <code>&lt;language&gt;_GENERATED_HEADERS</code> and  <code>&lt;language&gt;_INCLUDE_DIR</code>, where <code>&lt;language&gt;</code> refers to the Generator language.</p> <p>Sets the <code>CMAKE_CONFIGURE_DEPENDS</code> property on all reported input files (parsed IDL files, external types that are  picked up during parsing and the used config file), to automatically trigger re-configuration when one of the  referenced files changes.</p> <p>In case of an error, the CMake configuration is aborted.</p>"},{"location":"cmake/#options","title":"Options","text":"<p>The options are:</p> <ul> <li><code>&lt;filename&gt;</code>Filename/path of the Djinni-IDL file that should be processed.</li> <li><code>LANGUAGES</code>List of languages that bindings should be generated for.    Possible values: <code>cpp</code>, <code>cppcli</code>, <code>java</code>, <code>objc</code>, <code>yaml</code>.</li> <li><code>CONFIG &lt;config&gt;</code> OptionalFilename/path to the configuration file. Defaults to <code>pydjinni.yaml</code>. To disable the   configuration with a config file completely, set <code>CONFIG</code> to <code>None</code>.</li> <li><code>OPTIONS &lt;options&gt;</code> OptionalList of additional arbitrary configuration options that should be passed to the CLI.</li> <li><code>WORKING_DIRECTORY &lt;workdir&gt;</code> OptionalThe working-directory from which the generate command should be executed.   Default: <code>CMAKE_CURRENT_SOURCE_DIR</code>.</li> </ul>"},{"location":"cmake/#installation","title":"Installation","text":""},{"location":"cmake/#find-package","title":"Find Package","text":"<p>The CMake module is distributed with the PyDjinni Python package. It can be discovered automatically in the current Python environment with this <code>FindPyDjinni</code> module:</p> <p> FindPyDjinni.cmake</p> <pre><code>list(APPEND CMAKE_MODULE_PATH \n    # directory that contains FindPyDjinni.cmake\n    ${CMAKE_SOURCE_DIR}/cmake/modules) \nfind_package(PyDjinni)\ninclude(PyDjinni)\n</code></pre> <p>Using <code>find_package()</code> has the advantage that the included CMake module is guaranteed to be compatible with the currently installed version of PyDjinni.</p>"},{"location":"cmake/#manual-copy","title":"Manual Copy","text":"<p>The module can also be manually copied into the project:</p> <p> PyDjinni.cmake v1.0a7</p> <pre><code>list(APPEND CMAKE_MODULE_PATH \n    # directory that contains PyDjinni.cmake\n    ${CMAKE_SOURCE_DIR}/cmake)\ninclude(Pydjinni)\n</code></pre> <p>The disadvantage of this approach is that the module may need to be updated manually if it becomes incompatible with PyDjinni after an update.</p>"},{"location":"cmake/#example","title":"Example","text":"<pre><code>pydjinni_generate(example.pydjinni\n    LANGUAGES java\n    OPTIONS\n        generate.java.out=out/java\n        generate.java.package=foo.bar.package\n    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n)\n</code></pre> <p>This will call <code>pydjinni generate example.djinni java</code> in the top level of the current CMake source tree.</p> <p>The following variables are populated:</p> <ul> <li><code>java_GENERATED_SOURCES</code></li> <li><code>jni_GENERATED_SOURCES</code></li> <li><code>jni_GENERATED_HEADERS</code></li> <li><code>jni_INCLUDE_DIR</code></li> </ul>"},{"location":"config/","title":"Configuration","text":"<p>PyDjinni can be configured in different ways:</p> <ul> <li>Configuration file: If a file named <code>pydjinni.yaml</code> exists, it is picked up automatically.    With the parameter <code>--config</code> a custom filename can be specified.   The type of the file is determined by the filename extension.   Supported extensions are: <code>.yaml</code>, <code>.yml</code>, <code>.json</code>, <code>.toml</code> Example: <code>pydjinni --config=custom_filename.yaml generate input.djinni cpp</code></li> <li>CLI: The CLI <code>--option</code> parameter allows to set one or more configuration keys.   Values from the configuration file can be overridden by commandline parameters.   Example: <code>pydjinni --option generate.cpp.out=cpp_out_path generate input.djinni cpp</code></li> <li>Environment Variables: Options can also be provided by setting environment variables.   Environment variables can also be set in a <code>.env</code> file.   The file is automatically detected if present in the working directory.   Example: the environment variable <code>pydjinni__generate__cpp__out=header_out</code> is the equivalent to                      passing <code>--option generate.cpp.out</code> to the CLI.</li> <li>For some common settings a shortcut in the form of a special argument is provided by the CLI.    Example: When packaging a library, the default build configuration can be overridden like so:   <code>pydjinni package --configuration Debug aar android</code>. The <code>--configuration</code> argument is equivalent to setting the   <code>package.configuration</code> value in the configuration file or to passing the argument <code>-o package.configuration=Debug</code>   to the CLI.</li> </ul>"},{"location":"config/#configuration-parameters","title":"Configuration Parameters","text":"<p> JSON-Schema</p>"},{"location":"config/#generate","title":"generate","text":"<p>Configuration options related to language gluecode generation</p> Name Type Description <code>list_processed_files</code> string File that reports all the parsed and generated files. File format is determined by the file extension. Supported extensions: <code>.yaml</code>, <code>.yml</code>, <code>.json</code>, <code>.toml</code>(Optional) <code>include_dirs</code> array Include directories that are searched for <code>@import</code> and <code>@extern</code> directives.Default: <code>[]</code> <code>default_deriving</code> array Deriving functionality that should be added to every record by default.Default: <code>[]</code> <code>support_lib_sources</code> boolean Whether the required support lib sources should be copied to the generated output.Default: <code>True</code>"},{"location":"config/#cpp","title":"cpp","text":"Name Type Description <code>out</code> string, OutPaths The output folder for the generated files. Separate folders for <code>source</code> and <code>header</code> files can be specified. <code>namespace</code> string, array The namespace name to use for generated C++ classesDefault: <code>[]</code> <code>include_prefix</code> string The prefix for <code>#includes</code> of header files from C++ files(Optional) <code>header_extension</code> string The filename extension for C++ header filesDefault: <code>hpp</code> <code>source_extension</code> string The filename extension for C++ filesDefault: <code>cpp</code> <code>string_serialization</code> boolean Whether to generate <code>to_string</code> and <code>std::formatter</code> overloads for stringifying records, enums and flagsDefault: <code>True</code>"},{"location":"config/#not_null","title":"not_null","text":"<p>Configuration for wrapping <code>std::shared_ptr</code> with a <code>not_null</code> type.</p> Name Type Description <code>header</code> string The header file to include for not_null (e.g. <code>&lt;gsl/pointers&gt;</code>)(Optional) <code>type</code> string The type to use for not_null (e.g. <code>::gsl::not_null</code>)(Optional)"},{"location":"config/#identifier","title":"identifier","text":"Name Type Description <code>type</code> IdentifierStyle, string Default: <code>PascalCase</code> <code>enum</code> IdentifierStyle, string Default: <code>TRAIN_CASE</code> <code>file</code> IdentifierStyle, string Default: <code>snake_case</code> <code>field</code> IdentifierStyle, string Default: <code>snake_case</code> <code>method</code> IdentifierStyle, string Default: <code>snake_case</code> <code>namespace</code> IdentifierStyle, string Default: <code>snake_case</code>"},{"location":"config/#cppcli","title":"cppcli","text":"Name Type Description <code>out</code> string, OutPaths The output folder for the generated files. Separate folders for <code>source</code> and <code>header</code> files can be specified. <code>namespace</code> string, array The namespace name to use for generated C++/CLI classesDefault: <code>[]</code> <code>include_cpp_prefix</code> string The prefix for <code>#includes</code> of header files from C++ files(Optional) <code>nullability_attributes</code> boolean Whether diagnostics nullability attributes should be added to methods, functions and fields (Not available in .NET Framework)Default: <code>True</code> <code>string_serialization</code> boolean Whether to generate <code>ToString</code> overloads for recordsDefault: <code>True</code>"},{"location":"config/#identifier_1","title":"identifier","text":"Name Type Description <code>type</code> IdentifierStyle, string Default: <code>PascalCase</code> <code>type_param</code> IdentifierStyle, string Default: <code>PascalCase</code> <code>property</code> IdentifierStyle, string Default: <code>PascalCase</code> <code>method</code> IdentifierStyle, string Default: <code>PascalCase</code> <code>local</code> IdentifierStyle, string Default: <code>camelCase</code> <code>enum</code> IdentifierStyle, string Default: <code>PascalCase</code> <code>const</code> IdentifierStyle, string Default: <code>snake_case</code> <code>file</code> IdentifierStyle, string Default: - style: <code>PascalCase</code>- prefix: <code>CppCli</code> <code>namespace</code> IdentifierStyle, string Default: <code>PascalCase</code>"},{"location":"config/#java","title":"java","text":"<p>Java configuration options</p> Name Type Description <code>out</code> string The output folder for the generated files. <code>package</code> string, array The package name to use for generated Java classesExamples:- <code>my.package.name</code>- <code>other.package.name</code> <code>support_types_package</code> string, array The subpackage name where required support types are generated toDefault: <code>['pydjinni']</code> <code>interfaces</code> boolean Whether Java interfaces should be used instead of abstract classes where possibleDefault: <code>False</code> <code>class_access_modifier</code> string One of <code>public</code>, <code>package</code> <code>cpp_exception</code> string The type for translated C++ exceptions in JavaDefault: <code>java.lang.RuntimeException</code> <code>annotation</code> string Java annotation to place on all generated Java classes(Optional)Example: <code>@Foo</code> <code>nullable_annotation</code> string annotation that is added to all optional fields, parameters and return types. E.g. <code>@org.jetbrains.annotations.Nullable</code>(Optional) <code>nonnull_annotation</code> string annotation that is added to all non-optional fields, parameters and return types. E.g. <code>@org.jetbrains.annotations.NotNull</code>(Optional) <code>use_final_for_record</code> boolean Whether generated Java classes for records should be marked <code>final</code>Default: <code>True</code> <code>native_lib</code> string Name of the native library containing the JNI interface. If this option is set and an interface is marked as <code>main</code>, a static block will be added to the interface, that loads the native library.(Optional) <code>function_prefix</code> string Prefix for generated functional interfaces.Default: <code>Functional</code> <code>string_serialization</code> boolean Whether to generate <code>toString</code> overloads for recordsDefault: <code>True</code>"},{"location":"config/#identifier_2","title":"identifier","text":"Name Type Description <code>enum</code> IdentifierStyle, string Default: <code>TRAIN_CASE</code> <code>field</code> IdentifierStyle, string Default: <code>camelCase</code> <code>type</code> IdentifierStyle, string Default: <code>PascalCase</code> <code>method</code> IdentifierStyle, string Default: <code>camelCase</code> <code>package</code> IdentifierStyle, string Default: <code>snake_case</code>"},{"location":"config/#jni","title":"jni","text":"Name Type Description <code>out</code> string, OutPaths The output folder for the generated files. Separate folders for <code>source</code> and <code>header</code> files can be specified. <code>namespace</code> string, array The namespace name to use for generated JNI C++ classes <code>include_prefix</code> string The prefix for <code>#includes</code> of JNI header files from JNI C++ files.(Optional) <code>include_cpp_prefix</code> string The prefix for <code>#includes</code> of the main header files from JNI C++ files.(Optional) <code>header_extension</code> string The filename extension for JNI C++ header filesDefault: <code>hpp</code> <code>source_extension</code> string The filename extension for JNI C++ filesDefault: <code>cpp</code> <code>loader</code> boolean If enabled, a minimal <code>JNI_OnLoad</code>/<code>JNI_OnUnload</code> implementation is generated.Default: <code>True</code>"},{"location":"config/#identifier_3","title":"identifier","text":"Name Type Description <code>file</code> IdentifierStyle, string Default: <code>snake_case</code> <code>class_name</code> IdentifierStyle, string Default: <code>PascalCase</code> <code>enum</code> IdentifierStyle, string Default: <code>TRAIN_CASE</code> <code>field</code> IdentifierStyle, string Default: <code>camelCase</code> <code>method</code> IdentifierStyle, string Default: <code>camelCase</code> <code>namespace</code> IdentifierStyle, string Default: <code>PascalCase</code>"},{"location":"config/#objc","title":"objc","text":"Name Type Description <code>out</code> string, OutPaths The output folder for the generated files. Separate folders for <code>source</code> and <code>header</code> files can be specified. <code>type_prefix</code> string The prefix for Objective-C data types (usually two or three letters).(Optional)Default: `` <code>header_extension</code> string The filename extension for Objective-C header files.Default: <code>h</code> <code>source_extension</code> string The filename extension for Objective-C source files.Default: <code>m</code> <code>swift_bridging_header</code> string The name of the Objective-C Bridging Header required for using the interface from Swift.(Optional) <code>strict_protocols</code> boolean All generated <code>@protocol</code> will implement <code>&lt;NSObject&gt;</code>Default: <code>False</code> <code>string_serialization</code> boolean Whether to generate <code>description</code> overloads for recordsDefault: <code>True</code>"},{"location":"config/#swift","title":"swift","text":"<p>Configuration options related to using the Objective-C interface from Swift</p> Name Type Description <code>rename_interfaces</code> boolean Whether the Objective-C interface should be annotated with improved Swift method and class names.Default: <code>True</code> <code>bridging_header</code> string The name of the Objective-C Bridging Header required for using the interface from Swift.(Optional)"},{"location":"config/#identifier_4","title":"identifier","text":"Name Type Description <code>enum</code> IdentifierStyle, string Default: <code>PascalCase</code> <code>field</code> IdentifierStyle, string Default: <code>camelCase</code> <code>method</code> IdentifierStyle, string Default: <code>camelCase</code> <code>type</code> IdentifierStyle, string Default: <code>PascalCase</code> <code>param</code> IdentifierStyle, string Default: <code>PascalCase</code> <code>local</code> IdentifierStyle, string Default: <code>camelCase</code>"},{"location":"config/#objcpp","title":"objcpp","text":"Name Type Description <code>out</code> string, OutPaths The output folder for the generated files. Separate folders for <code>source</code> and <code>header</code> files can be specified. <code>namespace</code> string, array The namespace name to use for generated Objective-C++ classesDefault: <code>[]</code> <code>header_extension</code> string The filename extension for Objective-C++ header filesDefault: <code>h</code> <code>source_extension</code> string The filename extension for Objective-C++ source filesDefault: <code>mm</code>"},{"location":"config/#yaml","title":"yaml","text":"<p>When generating the interface for your project and wish to make it available to other users you can tell Djinni to generate a special YAML file as part of the code generation process. This file then contains all the information Djinni requires to include your types in a different project.</p> Name Type Description <code>out</code> string The output folder for YAML files (One for each type by default). <code>out_file</code> string If specified, all types are merged into a single YAML file instead of generating one file per type (relative to <code>yaml.out</code>).(Optional)"},{"location":"config/#build","title":"build","text":"<p>Build strategy configuration</p>"},{"location":"config/#conan","title":"conan","text":"<p>Settings specific to the Conan build strategy</p> Name Type Description <code>profiles</code> string The base directory where the target profiles are locatedDefault: <code>profiles</code>"},{"location":"config/#package","title":"package","text":"<p>Packaging configuration</p> Name Type Description <code>out</code> string output base directory for the final distributable packagesDefault: <code>dist</code> <code>target</code> string Name of the target that is going to produce the output <code>build_strategy</code> string Build system that should be used for compilingDefault: <code>conan</code> <code>version</code> string Version of the produced packageDefault: <code>0.0.0</code> <code>configuration</code> string One of <code>Release</code>, <code>Debug</code>, <code>MinSizeRel</code>, <code>RelWithDebInfo</code>"},{"location":"config/#aar","title":"aar","text":"<p>Android Archive</p>"},{"location":"config/#publish","title":"publish","text":"<p>Maven publishing information</p> Name Type Description <code>maven_registry</code> string Url of the maven registry that the package should be published to. <code>group_id</code> string Maven package groupId <code>artifact_id</code> string Maven package artifactId <code>username</code> string Username for the maven registry(Optional) <code>password</code> string Password (token) to access the maven registry.It is recommended to set this via the environment variable <code>PACKAGE__AAR__PUBLISH__PASSWORD</code>(Optional)"},{"location":"config/#platforms","title":"platforms","text":"Name Type Description <code>android</code> array List of targeted architectures. Supported: <code>x86</code>, <code>x86_64</code>, <code>armv7</code>, <code>armv8</code>"},{"location":"config/#nuget","title":"nuget","text":"<p>NuGet Package</p>"},{"location":"config/#publish_1","title":"publish","text":"<p>NuGet packaging and publishing configuration</p> Name Type Description <code>source</code> string, string NuGet server URL or local folder where the package should be published.Examples:- <code>https://nuget.pkg.github.com/NAMESPACE/index.json</code>- <code>C:\\Users\\Foo\\Path\\To\\Local\\Install</code>Default: <code>https://api.nuget.org/v3/index.json</code> <code>repository</code> string URL to the source Git repository.(Optional) <code>description</code> string (short) description of the package.(Optional)Default: `` <code>readme</code> string Path to a Markdown Readme file that should be included in the NuGet package.(Optional) <code>net_version</code> string .NET version used to compile the binaries. The packaged binaries have to be compiled for the configured .NET version!Default: <code>net8.0</code> <code>authors</code> array A comma-separated list of packages authors (matching the related profile names on <code>nuget.org</code> if published to the public registry)Default: <code>[]</code> <code>username</code> string Username for the NuGet Server(Optional) <code>password</code> string Password (token) to access the server.It is recommended to set this via the environment variable <code>PACKAGE__NUGET__PUBLISH__PASSWORD</code>(Optional)"},{"location":"config/#platforms_1","title":"platforms","text":"Name Type Description <code>windows</code> array List of targeted architectures. Supported: <code>x86</code>, <code>x86_64</code>, <code>armv7</code>, <code>armv8</code>"},{"location":"config/#swiftpackage","title":"swiftpackage","text":"<p>Swift package</p>"},{"location":"config/#publish_2","title":"publish","text":"Name Type Description <code>repository</code> string, string Remote Git repository or path to a local directory where the package should be publishedExamples:- <code>https://github.com/foo/bar.git</code>- <code>/path/where/swiftpackage/should/be/copied/to</code>- <code>git@github.com:foo/bar.git</code> <code>branch</code> string Git repository branch that the package should be pushed to.Default: <code>main</code> <code>username</code> string Username of git repository(Optional) <code>password</code> string Password (token) to access the git repository.It is recommended to set this via the environment variable <code>PACKAGE__SWIFTPACKAGE__PUBLISH__PASSWORD</code>(Optional)"},{"location":"config/#platforms_2","title":"platforms","text":"Name Type Description <code>macos</code> array List of targeted architectures. Supported: <code>x86_64</code>, <code>armv8</code> <code>ios</code> array List of targeted architectures. Supported: <code>armv8</code> <code>ios_simulator</code> array List of targeted architectures. Supported: <code>x86_64</code>, <code>armv8</code>"},{"location":"config/#type-definitions","title":"Type Definitions","text":""},{"location":"config/#outpaths","title":"OutPaths","text":"Name Type Description <code>source</code> string The output directory for source files <code>header</code> string The output directory for header files"},{"location":"config/#identifierstyle","title":"IdentifierStyle","text":"Name Type Description <code>style</code> string One of <code>none</code>, <code>camelCase</code>, <code>PascalCase</code>, <code>snake_case</code>, <code>kebab-case</code>, <code>TRAIN_CASE</code> <code>prefix</code> string Prefix that is added to the beginning of the identifier(Optional)"},{"location":"demo/","title":"Demo","text":"IDLConfig <p>  hello_world = main interface +cpp {     static say_hello() -&gt; string; }  </p> <p>  generate:     cpp:         namespace: foo::bar     java:         package: foo.bar     jni:         namespace: foo::bar::jni     objc:         type_prefix: FB         swift_bridging_header: bridging_header.h     cppcli:         namespace: foo::bar::cppcli  </p> C++JavaObjective-CC++/CLIYAML <p> Generated C++ interfaces will be displayed here. </p> <p> Generated Java code will be displayed here. </p> <p> Generated Objective-C interfaces will be displayed here. </p> <p> Generated C++/CLI (.NET) interfaces will be displayed here. </p> <p> Generated export YAML will be displayed here. </p>      This demo uses Pyodide to execute Python code in the Browser. It requires Javascript and a good portion of luck to work!  <p>This demo runs on PyDjinni v1.0a7. It uses the amazing Pyodide project to execute Python code in the browser.     No data is sent to a server!</p>"},{"location":"deriving/","title":"Record Deriving","text":""},{"location":"deriving/#eq","title":"eq","text":"<p>Equality operator.          All fields in the record are compared in the order they appear in the record declaration.          If you need to add a field later, make sure the order is correct.</p> cpp cppcli java objc \u2611\ufe0f \u2611\ufe0f \u2611\ufe0f \u2611\ufe0f"},{"location":"deriving/#ord","title":"ord","text":"<p>Ordering comparison.         Is not supported for collection types, optionals, and booleans.</p> cpp cppcli java objc \u2611\ufe0f \u2611\ufe0f \u2611\ufe0f \u2611\ufe0f"},{"location":"dev_setup/","title":"Development Setup","text":""},{"location":"dev_setup/#local-development","title":"Local development","text":"<p>Install an editable version of the executable:</p> <pre><code>pip install -e .\n</code></pre> <p>When running the <code>pydjinni</code> command, it will always execute the latest code in the local repository.</p>"},{"location":"dev_setup/#testing","title":"Testing","text":""},{"location":"dev_setup/#python-tests","title":"Python Tests","text":"<p>To execute the tests, first make sure that the required dependencies are installed: <pre><code>pip install .[dev]\n</code></pre></p> <p>The tests can then be executed with <code>pytest</code>:</p> <pre><code>pytest tests\n</code></pre>"},{"location":"dev_setup/#cmake-module-tests","title":"CMake Module Tests","text":"<pre><code>pytest cmake\n</code></pre>"},{"location":"dev_setup/#native-unit-and-integration-tests","title":"Native Unit- and Integration-Tests","text":"<pre><code>cmake -B build\ncmake --build build\nctest --test-dir build\n</code></pre>"},{"location":"dev_setup/#build-documentation","title":"Build documentation","text":"<pre><code>pip install -e .\npip install .[doc]\npython -m mkdocs serve\n</code></pre>"},{"location":"external_types/","title":"External Types","text":"<p>External Types can be provided with a YAML file, that provides all the necessary information for the targeted languages.</p>"},{"location":"external_types/#type-definition","title":"Type Definition","text":"<p> JSON-Schema</p> Name Type Description <code>comment</code> string A short description of the type <code>deprecated</code> string, boolean Marks a type as deprecatedDefault: <code>False</code> <code>name</code> string Name of the type in the IDL <code>namespace</code> array Namespace that the type lives inDefault: <code>[]</code> <code>primitive</code> string The underlying primitive typeDefault: <code>primitive</code> <code>params</code> array Default: <code>[]</code>"},{"location":"external_types/#cpp","title":"cpp","text":"Name Type Description <code>typename</code> string Must be a valid C++ type identifierExamples:- <code>int8_t</code>- <code>::some::Type</code> <code>header</code> string (Optional) <code>by_value</code> boolean Default: <code>False</code>"},{"location":"external_types/#cppcli","title":"cppcli","text":"Name Type Description <code>typename</code> string <code>translator</code> string <code>header</code> string (Optional) <code>reference</code> boolean Default: <code>True</code>"},{"location":"external_types/#java","title":"java","text":"<p>Java type information</p> Name Type Description <code>typename</code> string (Optional) <code>boxed</code> string (Optional)Default: `` <code>reference</code> boolean Default: <code>True</code> <code>generic</code> boolean Default: <code>False</code>"},{"location":"external_types/#jni","title":"jni","text":"Name Type Description <code>translator</code> string <code>header</code> string <code>typename</code> string One of <code>jobject</code>, <code>jstring</code>, <code>jboolean</code>, <code>jbyte</code>, <code>jchar</code>, <code>jshort</code>, <code>jint</code>, <code>jlong</code>, <code>jfloat</code>, <code>jdouble</code>, <code>jbyteArray</code> <code>type_signature</code> string Java VM Type SignaturesExample: <code>I</code> <code>boxed_type_signature</code> string Type signature of the boxed Java type. If the type is always boxed, both <code>type_signature</code> and <code>boxed_type_signature</code> should contain the same value.Example: <code>Ljava/lang/Integer;</code>"},{"location":"external_types/#objc","title":"objc","text":"Name Type Description <code>typename</code> string (Optional) <code>boxed</code> string <code>header</code> string (Optional) <code>pointer</code> boolean Default: <code>True</code>"},{"location":"external_types/#objcpp","title":"objcpp","text":"Name Type Description <code>translator</code> string <code>header</code> string"},{"location":"generator_plugin/","title":"Generator Plugin","text":"<p>To register a generator plugin, register the <code>pydjinni.generator</code> entry-point in the plugins <code>pyproject.toml</code>:</p> <pre><code>[project.entry-points.'pydjinni.generator']\nfoo = 'myplugin.foo:FooTarget'\n</code></pre> <p>Pydjinni will now automatically load the plugin, once it is installed.</p>"},{"location":"generator_plugin/#target","title":"Target","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for defining generation targets. A target combines multiple generators to one entity. E.g. to allow Java interop, both a Java and JNI generator are required.</p>"},{"location":"generator_plugin/#pydjinni.generator.target.Target.generators","title":"<code>generators</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>A list of generators related to the target. Typically, targets will have two generators:</p> <ol> <li>For the target (host) language</li> <li>For the glue-code required in C++ to interact with the host language</li> </ol>"},{"location":"generator_plugin/#pydjinni.generator.target.Target.internal","title":"<code>internal</code>  <code>property</code>","text":"<p>Whether a generator is an internal component that does not produce code. This is used to flag the <code>yaml</code> generator as not being a language target.</p>"},{"location":"generator_plugin/#pydjinni.generator.target.Target.key","title":"<code>key</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>The name of the target. Will be used by the API/CLI for selecting the target.</p>"},{"location":"generator_plugin/#pydjinni.generator.target.Target.supported_deriving","title":"<code>supported_deriving</code>  <code>property</code>","text":"<p>Record derivings that are supported by the target language. For documentation purposes only.</p>"},{"location":"generator_plugin/#generator","title":"Generator","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for defining generators. Each generator can utilize one or more Marshal classes, specified as generic arguments.</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.config_model","title":"<code>config_model</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>The Pydantic model that defines the configuration options for the generator.</p> <p>The model will automatically be registered in the system and is then available in the documentation and as part of the  JSON-Schema for the configuration file.</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.external_type_model","title":"<code>external_type_model</code>  <code>property</code>","text":"<p>The Pydantic model of the external type specification for the generator. The model should contain all information that is required to reference and use an external type in the generated code.</p> <p>The model will automatically be registered in the system and is then available in the documentation and as part of the JSON-Schema for external types.</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.external_types","title":"<code>external_types</code>  <code>property</code>","text":"<p>A dictionary of all builtin types that are supported by the generator. If the list is incomplete, an error is thrown when the user tries to use an unsupported type in a project that uses the generator.</p> <p>A complete list of all builtin types can be found in <code>pydjinni/generator/external_types.py</code></p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.filters","title":"<code>filters</code>  <code>property</code>","text":"<p>Jinja2 filter functions that are required in the generators Jinja templates</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.header_path","title":"<code>header_path</code>  <code>property</code>","text":"<p>The path where generated header files should be written.</p> <p>The default implementation expects the generators config model to contain a field <code>out</code> that is either a Path or of type <code>OutPaths</code>.</p> <p>Override this if the generators config doesn't match with those expectations.</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.key","title":"<code>key</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>The name of the generator. Will be used as configuration key and for importing/exporting external types.</p> <p>Typically, a target will have one generator with the same name (key) as the target. If additional glue code in C++ is provided, this will usually require a separate generator with a distinct name.</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.marshal_models","title":"<code>marshal_models</code>  <code>property</code>","text":"<p>A mapping of AST types to the marshalling model required by the generator. For each type in the AST, the generator searches for a matching marshalling model in this dictionary. If no marshalling model is found, an error will be thrown suggesting that the given AST type is not supported by the generator.</p> <p>The generator will search for a matching marshalling model by traversing the type hierarchy of the AST type until a matching marshalling model is found.</p> <p>A marshalling model must be a Pydantic model with two fields: - <code>decl</code> for the type of field declaration and - <code>config</code> for the generator configuration</p> <p>All marshalling must happen in methods decorated as <code>@cached_property</code>, where the declaration and the configuration is used to derive information needed by the generator. Type marshalling properties must at least contain a property for each field in the given external type model. Every property that should be exported as part of the external type YAML definition must be decorated with <code>@computed_field</code>.</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.source_path","title":"<code>source_path</code>  <code>property</code>","text":"<p>The path where generated source files should be written.</p> <p>The default implementation expects the generators config model to contain a field <code>out</code> that is either a Path or of type <code>OutPaths</code>.</p> <p>Override this if the generators config doesn't match with those expectations.</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.support_lib_commons","title":"<code>support_lib_commons</code>  <code>property</code>","text":"<p>Whether the code generated by this generator depends on the common support lib code provided by pydjinni.</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.tests","title":"<code>tests</code>  <code>property</code>","text":"<p>Jinja2 test functions that are required in the generators Jinja templates</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.writes_header","title":"<code>writes_header</code>  <code>property</code>","text":"<p>Whether the generator will generate header files. This information is required for documentation purposes and for providing a valid JSON-Schema for the processed files report.</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.writes_source","title":"<code>writes_source</code>  <code>property</code>","text":"<p>Whether the generator will generate source files. This information is required for documentation purposes and for providing a valid JSON-Schema for the processed files report.</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.GenerationException","title":"<code>GenerationException</code>","text":"<p>               Bases: <code>ApplicationException</code></p> <p>Generation error</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.clean","title":"<code>clean()</code>","text":"<p>purge all content from source and header output directories</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.generate","title":"<code>generate(ast, copy_support_lib_sources=True)</code>","text":"<p>This method is initiated by the system to start code generation.</p> <p>Iterates over all given type definitions and dynamically searches for a matching generator function. A valid generator function must have the following signature, where <code>&lt;type&gt;</code> is a lowercase representation of the full type name, separated by <code>_</code> instead of <code>.</code> if the given type is a subclass: <pre><code>def generate_&lt;type&gt;(self, type_def: BaseType):\n    ...\n</code></pre></p> <p>If no direct match for the types class name can be found, the inheritance hierarchy is traversed until a match was found.</p> <p>Examples:</p> <ul> <li><code>def generate_interface(self, type_def: Interface)</code> will match for the <code>Interface</code> type.</li> <li><code>def generate_base_type(self, type_def: BaseType)</code> will match for all types deriving from <code>BaseType</code>   if no better match can be found.</li> </ul> <p>This method may be overridden if the default dynamic detection behaviour doesn't fit the requirements.</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.generate_support_lib","title":"<code>generate_support_lib()</code>","text":"<p>Copies support lib files if they exist. Fails silently if no files can be found in the expected directories.</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.marshal","title":"<code>marshal(type_decls, field_decls)</code>","text":"<p>Attaches marshalling models to the provided type and field definitions.</p> <p>Searches the provided marshalling model mappings for a matching marshalling model for each given type or field. If no direct match can be found, the inheritance hierarchy is traversed until a matching model is found.</p> <p>Once a matching marshalling model was found, it is initialized and attached to the given type/field definition.</p> Note <p>During attachment of the marshalling models, no actual marshalling is happening. Only during rendering of the Jinja templates the marshalling model properties are evaluated.</p> <p>The method may be overridden with custom marshalling logic if the default behaviour doesn't fit the requirements. But the outcome must always be a Pydantic model being attached to each given type and field declaration passed to the method!</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.write_header","title":"<code>write_header(template, filename=None, **kwargs)</code>","text":"<p>Method that must be used for any header file that is written by the generator.</p> <p>Providing a filename is optional if a type definition is provided in the <code>type_def</code> parameter. In this case the filename can be derived from the marshalling model, given that a <code>header</code> field is provided.</p>"},{"location":"generator_plugin/#pydjinni.generator.generator.Generator.write_source","title":"<code>write_source(template, filename=None, **kwargs)</code>","text":"<p>Method that must be used for any source file that is written by the generator.</p> <p>Providing a filename is optional if a type definition is provided in the <code>type_def</code> parameter. In this case the filename can be derived from the marshalling model, given that a <code>source</code> field is provided.</p>"},{"location":"idl/","title":"Interface Definition","text":"<p>The Interface Definition Language (IDL) is used to define the interface between C++ and  the host language.</p>"},{"location":"idl/#built-in-types","title":"Built-In Types","text":"<p>PyDjinni comes with a set of built-in data types. Consult the Types reference for a full list of all  available types.</p>"},{"location":"idl/#optional-types","title":"Optional types","text":"<p>Suffixing a type with a <code>?</code> marks it as optional. Optional values may be null.</p> <pre><code>foo = record {\n    bar: i32?;\n}\n</code></pre>"},{"location":"idl/#enums","title":"Enums","text":"<pre><code>foo = enum {\n    option1;\n    option2;\n    option3;\n}\n</code></pre>"},{"location":"idl/#flags","title":"Flags","text":"<pre><code>bar = flags {\n    flag1;\n    flag2;\n    flag3;\n    no_flags = none;\n    all_flags = all;\n}\n</code></pre>"},{"location":"idl/#record","title":"Record","text":"<p>Records are pure data value objects, that combine multiple fields into a data class.</p> <pre><code>data = record {\n    id: i32;\n    info: string;\n    store: set&lt;string&gt;;\n    hash: map&lt;string,i32&gt;;\n}\n</code></pre>"},{"location":"idl/#extensions","title":"Extensions","text":"<p>To support extra fields and/or methods, a record can be \"extended\" in any language. To extend a record in a language, you can add a language target flag after the record tag. The generated type will have a Base suffix, and you should create a derived type without the suffix that extends  the record type.</p> <p>The derived type must be constructible in the same way as the Base type. Interfaces will always use the derived type.</p>"},{"location":"idl/#deriving","title":"Deriving","text":"<p>For record types, Haskell-style \"deriving\" declarations are supported to generate some common methods. This way for example equality and order comparators or a method for giving a string representation of the record can be added. Not all features may be available in all target languages.  Consult the Deriving Reference for a full list of available declarations.</p> <pre><code>foo = record {\n    bar: i32;\n} deriving (str, eq, ord)\n</code></pre>"},{"location":"idl/#interface","title":"Interface","text":"<p>Interfaces are objects with defined methods to call (in C++, passed by <code>shared_ptr</code>). PyDjinni produces code allowing an interface implemented in C++ to be transparently used from Objective-C or Java  and vice versa.</p> <pre><code># This interface will be implemented in C++ \n# and can be called from any language.\nmy_cpp_interface = interface +cpp {\n    method_returning_nothing(value: i32);\n    method_returning_some_type(key: string) -&gt; data;\n    static get_version() -&gt; i32;\n}\n\n# This interface will be implemented \n# in Java or Objective-C and can be called from C++.\nmy_client_interface = interface -cpp {\n    log_string(str: string) -&gt; bool;\n}\n</code></pre>"},{"location":"idl/#special-methods-for-c-only","title":"Special Methods for C++ only","text":"<p><code>+cpp</code> interfaces (implementable only in C++) can have methods flagged with the special keywords <code>const</code> and <code>static</code> which have special effects in C++:</p> <pre><code>special_methods = interface +cpp { \n    const accessor_method(); \n    static factory_method(); \n}\n</code></pre> <ul> <li><code>const</code> methods will be declared as <code>const</code> in C++, though this cannot be enforced on callers in other languages,    which lack this feature.</li> <li><code>static</code> methods will become a <code>static</code> method of the C++ class, which can be called from other languages without an    object. This is often useful for factory methods to act as a cross-language constructor.</li> </ul>"},{"location":"idl/#main-interface","title":"Main Interface","text":"<p>Usually a PyDjinni library will have one or more entrypoints, in the form of an <code>interface</code> with a <code>static</code> constructor. When using the library from Java, it is vital to ensure that the underlying native JNI library is loaded before  calling the constructor.</p> <p>Usually this requires a <code>System.loadLibrary(\"FooBar\");</code> call ahead of time.</p> <p>To automate the native library loading, any C++ interface can be marked as <code>main</code>:</p> <pre><code>foo = main interface +cpp {\n    static get_instance() -&gt; foo;\n}\n</code></pre> <p>Given that the name of the native library is configured in the <code>generator.java.native_lib</code> property, a static initialization block is added to the interface, ensuring that the native library is loaded automatically.</p>"},{"location":"idl/#throwing-exceptions","title":"Throwing exceptions","text":"<p>Generated C++ Methods are marked as <code>noexcept</code> by default. By marking methods as <code>throws</code> in the IDL,  automatic exception translation can be enabled:</p> <pre><code>foo = interface {\n    some_method() throws -&gt; i8; \n}\n</code></pre> <p>Any exception raised in C++ is now translated to the target language and vice versa.</p>"},{"location":"idl/#async","title":"Async","text":"<p>The <code>async</code> modifier can be used to specify that a method is asynchronous.</p> <pre><code>foo = main interface +cpp {\n    static async get_instance(): foo\n    async method(input: i32);\n}\n</code></pre> <p>Asynchronous methods are implemented as C++ coroutines and are mapped to similar asynchronous execution models in each target language:</p> <ul> <li>Java: <code>CompletableFuture</code></li> <li>.NET: <code>Task</code></li> <li>Objective-C: <code>completion</code> handlers</li> </ul> <p>When calling an asynchronous method in C++, the coroutine will automatically continue execution in a separate thread managed by the host language's default thread pool. This provides a convenient programming model for non-blocking execution of long-running tasks, such as network requests or file I/O operations across language boundaries.</p>"},{"location":"idl/#errors","title":"Errors","text":"<p>Errors are specialized exception types that can optionally transport additional error data. They are grouped inside an error domain type, similar to the concept of <code>NSError</code> domains and codes in Objective-C.</p> <pre><code>networking_error = error {\n    timeout;\n    error_code(code: i8);\n}\n</code></pre> <p>Methods can then be marked to throw a specific error domain:</p> <pre><code>foo = interface {\n    some_method() throws networking_error -&gt; i8;\n}\n</code></pre> <p>Every error can optionally be provided with an error message by default, and can be thrown from either C++ or the host  language. When raised, the exception will be translated to its counterpart in the other language.</p>"},{"location":"idl/#functions","title":"Functions","text":"<p>Functions can be passed to and returned from interface methods. They are represented by <code>std::function</code> in C++,  <code>@FunctionalInterface</code> in Java,  <code>blocks</code> in Objective-C and <code>delegate</code> in C++/CLI (.NET).</p> <p>Functions can either be defined like a type, or can be defined inline where they are needed as anonymous functions:</p> <pre><code>named_func = function (input: i32) -&gt; bool;\n\nfoo = interface {\n    register_callback(callback: named_func);\n    register_anonymous_callback(callback: (input: i32) -&gt; bool);\n}\n</code></pre> <p>There is a short and a long form for defining functions. The long form allows target flags to be added in order to optimize the generated code:</p> <pre><code>callback = function -cpp (input: i32) -&gt; bool;\n</code></pre> <p>The short form doesn't allow for code optimization, but in return is a lot more brief: <pre><code>callback = (input: i32) -&gt; bool;\n</code></pre></p>"},{"location":"idl/#namespaces","title":"Namespaces","text":"<p>The interface file can be structured with namespaces:</p> <pre><code>namespace foo {\n    bar = record {}\n}\n</code></pre> <p>The specified namespace is appended to the base namespace that is defined in the generator configuration.</p>"},{"location":"idl/#comments","title":"Comments","text":"<p>Comments starting with <code>#</code> are converted to documentation comments in the generated interfaces.</p> <p>CommonMark flavored Markdown can be used to format the text.</p> <p>Types inside inline code blocks with double backticks will be resolved and transformed to the generated type in each target language: <code>``foo``</code>.</p> <p>The following special commands are available:</p> Command Description <code>@returns { description }</code> documents the return value of a method <code>@deprecated { description }</code> marks a type, field or method as deprecated <code>@param &lt;name&gt; { description }</code> documents a method parameter <code>@throws &lt;type_ref&gt; { description }</code> documents an exception type that a method may throw <p>Both JavaDoc or Doxygen style commands can be used: <code>@deprecated</code>, <code>\\deprecated</code>.</p>"},{"location":"idl/#antlr-grammar","title":"ANTLR grammar","text":"<p>The grammar of the IDL is defined with ANTRL. The grammar below is the actual definition used by the parser:</p> <pre><code>grammar Idl;\n\n\nidl              : load* namespaceContent* EOF;\nload             : importDef | extern;\ncomment          : COMMENT+;\nimportDef        : IMPORT filepath;\nextern           : EXTERN filepath;\nfilepath         : FILEPATH;\nnamespace        : comment? NAMESPACE nsIdentifier LBRACE namespaceContent* RBRACE;\nnamespaceContent : typeDecl | namespace;\ntypeDecl         : enum | flags | record | interface | namedFunction | errorDomain;\nenum             : comment? identifier ASSIGN ENUM LBRACE item* RBRACE;\nitem             : comment? identifier SEMI;\nflags            : comment? identifier ASSIGN FLAGS LBRACE flag* RBRACE;\nflag             : comment? identifier modifier? SEMI;\nmodifier         : ASSIGN ID;\nrecord           : comment? identifier ASSIGN RECORD targets LBRACE field* RBRACE deriving?;\nfield            : comment? identifier COLON typeRef SEMI;\ntypeRef          : dataType | function;\ndataType         : nsIdentifier (LT (dataType COMMA)* dataType GT)? OPTIONAL?;\nfunction         : (FUNCTION targets)? LPAREN ((parameter COMMA)* parameter)? RPAREN throwing? (ARROW typeRef)?;\nthrowing         : THROWS ( (typeRef COMMA)* typeRef)?;\ntargets          : TARGET*;\nparameter        : identifier COLON typeRef;\nderiving         : DERIVING LPAREN ((declaration COMMA)* declaration)? RPAREN;\ndeclaration      : ID;\ninterface        : comment? identifier ASSIGN MAIN? INTERFACE targets LBRACE (method | prop)* RBRACE;\nnamedFunction    : comment? identifier ASSIGN function SEMI;\nmethod           : comment? STATIC? CONST? ASYNC? identifier LPAREN ((parameter COMMA)* parameter)? RPAREN throwing? (ARROW typeRef)? SEMI;\nerrorDomain      : comment? identifier ASSIGN ERROR LBRACE errorCode* RBRACE;\nerrorCode        : comment? identifier (LPAREN ((parameter)* parameter)? RPAREN)? SEMI;\nprop             : comment? PROPERTY identifier COLON typeRef SEMI;\nidentifier       : ID;\nnsIdentifier     : NS_ID | ID;\n\nIMPORT           : '@import';\nEXTERN           : '@extern';\nNAMESPACE        : 'namespace';\nENUM             : 'enum';\nFLAGS            : 'flags';\nSTATIC           : 'static';\nCONST            : 'const';\nMAIN             : 'main';\nINTERFACE        : 'interface';\nRECORD           : 'record';\nDERIVING         : 'deriving';\nFUNCTION         : 'function';\nPROPERTY         : 'property';\nASYNC            : 'async';\nERROR            : 'error';\nTHROWS           : 'throws';\nARROW            : '-&gt;';\nOPTIONAL         : '?';\nASSIGN           : '=';\nCOLON            : ':';\nLPAREN           : '(';\nRPAREN           : ')';\nLBRACE           : '{';\nRBRACE           : '}';\nGT               : '&gt;';\nLT               : '&lt;';\nSEMI             : ';';\nCOMMA            : ',';\nDOT              : '.';\nFILEPATH         : '\"' .*? '\"';\nTARGET           : ('+' | '-') [a-z]+;\nCOMMENT          : '#' ~[\\r\\n]*;\nWS               : [ \\t\\r\\n]+ -&gt; skip;\n\n\nID               : Letter LetterOrDigit*;\nNS_ID            : ('.'? ID )+;\n\nfragment LetterOrDigit : Letter | [0-9_];\nfragment Letter        : [a-zA-Z];\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>PyDjinni is distributed on the Python Package Index. It also includes the support-library code that is required for the generated glue code to function.</p>"},{"location":"installation/#pypi-recommended","title":"PyPI (recommended)","text":"<pre><code>pip install pydjinni\n</code></pre>"},{"location":"installation/#git","title":"Git","text":"<p>To get access to yet unreleased changes, PyDjinni can be installed directly from the git repository:</p> <pre><code>pip install git+https://git@github.com/pydjinni/pydjinni.git@main\n</code></pre>"},{"location":"introduction/","title":"Introduction","text":"<p>PyDjinni is a toolchain that supports the process of developing, building, packaging and publishing a cross-platform  library written in C++.</p>"},{"location":"introduction/#interface-definition","title":"Interface Definition","text":"<p>The PyDjinni Interface Definition Language (IDL) is used to define the language interoperability interfaces between C++ and a target programming language like Java, Swift or C#.</p> <p>From the IDL, glue code is generated that automatically converts data and delegates method calls across the language boundary.</p> <p>Consult the Interface Definition Reference for a full documentation of all features of the IDL.</p> <pre><code>my_cool_enum = enum {\n    option1;\n    option2;\n    option3;\n}\n\n# test comment\n# this is a test comment with a list:\n# * first\n# * second\nmy_flags = flags {\n    # flag comment\n    flag1;\n    flag2;\n    flag3;\n    no_flags = none;\n    all_flags = all;\n    more = all;\n}\n\nfoo = record {\n    # comment\n    id: i16;\n    info: i16;\n}\n\nmy_cpp_interface = main interface +cpp {\n    # comment\n    method_returning_nothing(\n        value: i16,\n        foo: i16\n    );\n    method_returning_some_type(key: i8) -&gt; foo;\n    static get_version() -&gt; i8;\n}\n</code></pre>"},{"location":"introduction/#generating-interfaces","title":"Generating Interfaces","text":"<p>The <code>generate</code> subcommand produces glue code in the specified target languages from the PyDjinni IDL.</p> <p>The following command generates Java, C++, Objective-C and C++/CLI language bindings for Android from the <code>foo.pydjinni</code> IDL file:</p> <pre><code>pydjinni generate foo.pydjinni cpp java objc cppcli\n</code></pre>"},{"location":"introduction/#building-and-packaging","title":"Building and Packaging","text":"<p>PyDjinni does also come with tools supporting the building and packaging process of a cross-platform C++ library.</p> <p>The <code>package</code> subcommand builds and packages distributable artifacts for the specified platforms.</p> <p>The following commands produce both an Android Archive (AAR), a Swift package for iOS and macOS and a NuGet for Windows:</p> <pre><code>pydjinni package aar android\npydjinni package swiftpackage ios macos ios_simulator\npydjinni package nuget windows\n</code></pre>"},{"location":"introduction/#publishing","title":"Publishing","text":"<p>Once artifacts are built, they can be published easily with PyDjinni.</p> <p>It can upload the distribution artifact to a repository or registry, hiding away the underlying process that is  different for every targeted platform:</p> <pre><code>pydjinni publish aar\npydjinni publish swiftpackage\npydjinni publish nuget\n</code></pre>"},{"location":"introduction/#configuration","title":"Configuration","text":"<p>All details of generating glue code and building, packaging and publishing a cross-platform library with PyDjinni is configured through the <code>pydjinni.yaml</code> configuration file.</p> <p>For a full overview of all available configuration parameters, consult the Configuration Reference.</p> <p>The following example shows what a minimal configuration file could look like:</p> <pre><code>generate:\n  cpp:\n    out:\n      header: generated/cpp/include\n      source: generated/cpp/src\n    namespace: pydjinni::example\n  java:\n    out: lib/generated/java\n    package: com.pydjinni.example\n  jni:\n    out: lib/generated/jni\n  objc:\n    out: lib/generated/objc\n  objcpp:\n    out: generated/objcpp\n    namespace: pydjinni::example::objcpp\n    swift:\n      bridging_header: PyDjinniLibrary.h\n  cppcli:\n    out: generated/cppcli\n    namespace: pydjinni::example::cppcli \npackage:\n  version: 1.1.0\n  target: MyLibrary\n  swiftpackage:\n    publish:\n      repository: github.com/foo/bar.git\n    platforms:\n      ios: [armv8]\n      ios_simulator: [x86_64, armv8]\n  aar:\n    publish:\n      group_id: com.pydjinni\n      artifact_id: example\n      maven_registry: https://maven.pkg.github.com/foo/bar\n    platforms:\n      android: [x86_64, armv8]\n  nuget:\n    publish:\n      description: \"package description\"\n      authors: [\"foo\"]\n    platforms:\n      windows: [x86_64, armv8]\n</code></pre>"},{"location":"introduction/#credentials","title":"Credentials","text":"<p>Credentials for artifact publication should not be stored in the configuration file or passed to the command via the CLI. Instead, they can be set as environment variables or in a <code>.env</code> file:</p> <pre><code># Maven credentials\npydjinni__package__aar__publish__username=foo\npydjinni__package__aar__publish__password=&lt;password&gt;\n# Swiftpackage (Git) credentials\npydjinni__package__swiftpackage__publish__username=bar\npydjinni__package__swiftpackage__publish__password=&lt;password&gt;\n# NuGet credentials\npydjinni__package__nuget__publish__username=baz\npydjinni__package__nuget__publish__password=&lt;password&gt;\n</code></pre>"},{"location":"migration/","title":"Migrating from Djinni","text":"<p>PyDjinni is heavily inspired by Djinni. The generated code is very similar to the one generated by Djinni, and most of the support-library code is borrowed from the original implementation.</p> <p>However, there are some major breaking changes that need to be considered when migrating to PyDjinni.</p>"},{"location":"migration/#command-line-interface","title":"Command Line Interface","text":"<p>The CLI has changed a lot. The preferred way of configuring the code generation process is now by specifying a configuration file. This makes the CLI a lot more easy to use.</p> <p>Consult the Command Line Interface Reference for information on the new CLI,  and the Configuration Reference for detailed documentation on all available configuration parameters.</p>"},{"location":"migration/#interface-definition-language","title":"Interface Definition Language","text":"<p>The IDL has been slightly altered:</p> <ul> <li>Support for defining constants in records and interfaces has been removed.</li> <li>A new <code>function</code> type was introduced.</li> <li>The return type of methods is now indicated by an arrow (<code>-&gt;</code>) instead of a colon (<code>:</code>).</li> <li>Interface and record target languages are now defined with multi-letter indicators (<code>+cpp</code>, <code>+java</code>, <code>+objc</code>).</li> </ul> <p>For all details of the PyDjinni IDL refer to the Interface Definition Reference.</p>"},{"location":"migration/#support-library","title":"Support Library","text":"<p>The support library of PyDjinni is not compatible with the original support library in Djinni. At the moment the changes in the interface are not significant, but it might diverge over time!</p> <p>In PyDjinni, the support library is automatically copied to the generated code output alongside the generated glue code by default. This means that there is no longer a need to include the library as a separate target in the build process.</p> <p>The new behaviour can be disabled if needed. As a fallback, the repository also provides CMake targets for each  supported target language that can be included into the build manually.</p>"},{"location":"migration/#processed-files-reporting","title":"Processed files reporting","text":"<p>In Djinni, the list of input and output files could be reported to a file with the <code>--list-in-files</code> and  <code>--list-out-files</code> arguments. In PyDjinni, both reports are combined in a detailed Processed Files report that can be generated in  YAML, TOML or JSON file format. It contains detailed information on all files that have been parsed and generated.</p> <p>Consult the Processed Files Reference for details on the new reporting format.</p>"},{"location":"migration/#external-types","title":"External Types","text":"<p>The new file format for exporting and importing external types is incompatible to Djinni. Consult the External Types Reference for detailed information on the new file format.</p>"},{"location":"package_plugin/","title":"Package Plugin","text":"<p>To register a build plugin, register the <code>pydjinni.packaging</code> entry-point in the plugins <code>pyproject.toml</code>:</p> <pre><code>[project.entry-points.'pydjinni.packaging']\nfoo = 'myplugin.foo:FooTarget'\n</code></pre> <p>Pydjinni will now automatically load the plugin, once it is installed.</p>"},{"location":"package_plugin/#target","title":"Target","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"package_plugin/#pydjinni.packaging.target.PackageTarget.key","title":"<code>key</code>  <code>abstractmethod</code> <code>cached</code> <code>property</code>","text":"<p>The name of the package plugin. Will be used as configuration key.</p>"},{"location":"package_plugin/#pydjinni.packaging.target.PackageTarget.platforms","title":"<code>platforms</code>  <code>abstractmethod</code> <code>cached</code> <code>property</code>","text":"<p>Dictionary of supported platforms and architectures</p>"},{"location":"package_plugin/#pydjinni.packaging.target.PackageTarget.after_build","title":"<code>after_build(target, architectures)</code>","text":"<p>Implement this method to add additional postprocessing step to the build output that was produced by the configured build system.</p>"},{"location":"package_plugin/#pydjinni.packaging.target.PackageTarget.package","title":"<code>package(clean=False)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>clean</code> <code>bool</code> <p>Whether the packaging should be started from scratch</p> <code>False</code> <p>Returns:     Path to the final package that has been created</p>"},{"location":"package_plugin/#pydjinni.packaging.target.PackageTarget.package_build","title":"<code>package_build()</code>  <code>abstractmethod</code>","text":"<p>Implement this method to bundle a package.</p>"},{"location":"package_plugin/#pydjinni.packaging.target.PackageTarget.publish","title":"<code>publish()</code>  <code>abstractmethod</code>","text":"<p>Implement this method to publish the bundled package</p>"},{"location":"processed_files/","title":"Processed Files","text":"<p>If the option <code>generate.list_processed_files</code> defines the filename for where the processed files should be reported, the generator will create a report of all parsed and generated files.</p> <p>The type of the file is determined by the filename extension, supported extensions are: <code>.yaml</code>, <code>.yml</code>, <code>.json</code>, <code>.toml</code>.</p>"},{"location":"processed_files/#file-structure","title":"File Structure","text":"<p> JSON-Schema</p>"},{"location":"processed_files/#parsed","title":"parsed","text":"<p>List of input files that have been parsed. This does not include the config file.</p> Name Type Description <code>idl</code> array <code>external_types</code> array"},{"location":"processed_files/#generated","title":"generated","text":"<p>List of generated files from all registered generators</p>"},{"location":"processed_files/#cpp","title":"cpp","text":"Name Type Description <code>include_dir</code> string Path where all cpp header files are written to. <code>header</code> array List of generated cpp header files. <code>source</code> array List of generated cpp source files. <code>source_dir</code> string Path where all cpp source files are written to."},{"location":"processed_files/#cppcli","title":"cppcli","text":"Name Type Description <code>include_dir</code> string Path where all cppcli header files are written to. <code>header</code> array List of generated cppcli header files. <code>source</code> array List of generated cppcli source files. <code>source_dir</code> string Path where all cppcli source files are written to."},{"location":"processed_files/#java","title":"java","text":"Name Type Description <code>source</code> array List of generated java source files. <code>source_dir</code> string Path where all java source files are written to."},{"location":"processed_files/#jni","title":"jni","text":"Name Type Description <code>include_dir</code> string Path where all jni header files are written to. <code>header</code> array List of generated jni header files. <code>source</code> array List of generated jni source files. <code>source_dir</code> string Path where all jni source files are written to."},{"location":"processed_files/#objc","title":"objc","text":"Name Type Description <code>include_dir</code> string Path where all objc header files are written to. <code>header</code> array List of generated objc header files. <code>source</code> array List of generated objc source files. <code>source_dir</code> string Path where all objc source files are written to."},{"location":"processed_files/#objcpp","title":"objcpp","text":"Name Type Description <code>include_dir</code> string Path where all objcpp header files are written to. <code>header</code> array List of generated objcpp header files. <code>source</code> array List of generated objcpp source files. <code>source_dir</code> string Path where all objcpp source files are written to."},{"location":"processed_files/#yaml","title":"yaml","text":"Name Type Description <code>source</code> array List of generated yaml source files. <code>source_dir</code> string Path where all yaml source files are written to."},{"location":"project_setup/","title":"Project Setup","text":"<p>To start a new project with PyDjinni, you can either use the PyDjinni Project Template adapt it to your needs, or you can bootstrap a new project with the <code>project-init</code> setup wizard.</p>"},{"location":"project_setup/#project-template","title":"Project Template","text":"<p>The project template showcases how to use PyDjinni together with Conan and CMake to configure and build a cross-platform library.</p> <p> Use the template</p>"},{"location":"project_setup/#setup-wizard","title":"Setup Wizard","text":"<p>The setup wizard can be used to bootstrap a simple project setup from scratch. It will ask you a few questions and then create a minimal working project setup for using PyDjinni together with Conan and CMake.</p> <pre><code>pydjinni-init conan-cmake\n</code></pre> <p>For more details on how to use the setup wizard, consult the Setup Wizard Reference.</p>"},{"location":"project_setup/#stay-curious","title":"Stay curious!","text":"<p>While both methods of setting up a new projects currently only support CMake with Conan, PyDjinni is designed to be flexible and extendable.</p> <p>If for some reason the given technology stack doesn't work for you, it is possible to add support for any other build  system by developing a custom build plugin.</p>"},{"location":"pygments/","title":"Pygments","text":"<p>The <code>pydjinni</code> package automatically defines an entry-point for a primitive custom Pygments Lexer for IDL files.</p> <p>Once installed, it is automatically registered in Pygments for syntax-highlighting IDL files:</p> <pre><code> pygmentize -l djinni -f html test.pydjinni\n</code></pre> <p>The Lexer is also used for rendering IDL files in this documentation.</p>"},{"location":"setup_wizard/","title":"Setup Wizard","text":"<p>PyDjinni comes with a setup wizard that allows to bootstrap a simple project setup from a list of available templates.</p> <p>When running the wizard, a new PyDjinni Library project is initialized in the current working directory.</p>"},{"location":"setup_wizard/#pydjinni-init","title":"pydjinni-init","text":"<p>Usage:</p> <pre><code>pydjinni-init [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--log-level</code>, <code>-l</code> choice (<code>debug</code> | <code>info</code> | <code>warn</code> | <code>error</code>) Log level <code>info</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"setup_wizard/#conan-cmake","title":"conan-cmake","text":"<p>Initializes a CMake project that uses Conan to configure and build a PyDjinni cross-platform library.</p> <p>Usage:</p> <pre><code>pydjinni-init conan-cmake [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--output-dir</code> Path Directory where the project should be initialized <code>.</code> <code>--platforms</code> text Comma separated list of system target platforms <code>android,darwin,windows</code> <code>--target</code> text The CMake build target name <code>PyDjinniLib</code> <code>--cpp-namespace</code> text The C++ root namespace of the library <code>pydjinni::lib</code> <code>--version</code> text Library package version <code>0.0.0</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"setup_wizard/#return-codes","title":"Return Codes","text":"<p>In the event of an error, the CLI tries to provide a helpful return code for further error handling in addition to the  error message.</p> Code Description 120 Unknown packaging target"},{"location":"template_plugin/","title":"Template Plugin","text":"<p>To register a template plugin that can be used to initialize a new project setup with the setup wizard,  register the <code>pydjinni.builder</code> entry-point in the plugins <code>pyproject.toml</code>:</p> <pre><code>[project.entry-points.'pydjinni.init']\nfoo = 'myplugin.foo:FooTarget'\n</code></pre> <p>Where <code>FooTarget</code> is implementing the <code>TemplateTarget</code> interface.</p> <p>Pydjinni will now automatically load the plugin, once it is installed.</p>"},{"location":"template_plugin/#templatetarget","title":"TemplateTarget","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class that all template plugins must derive from.</p>"},{"location":"template_plugin/#pydjinni_init.templates.target.TemplateTarget.additional_files","title":"<code>additional_files</code>  <code>abstractmethod</code> <code>cached</code> <code>property</code>","text":"<p>Map of additional files not in the templates directory that should be included in the output. The key is the source of the file, the value is the relative output path where the file should be written to.</p>"},{"location":"template_plugin/#pydjinni_init.templates.target.TemplateTarget.key","title":"<code>key</code>  <code>abstractmethod</code> <code>cached</code> <code>property</code>","text":"<p>The name of the package plugin. Will be used as configuration key.</p>"},{"location":"template_plugin/#pydjinni_init.templates.target.TemplateTarget.parameters","title":"<code>parameters</code>  <code>abstractmethod</code> <code>cached</code> <code>property</code>","text":"<p>List of custom parameters that are required for rendering the template. Each parameter will be added as mandatory command line option that will prompt for a value if not provided by the user in the command call.</p>"},{"location":"template_plugin/#pydjinni_init.templates.target.TemplateTarget.supported_platforms","title":"<code>supported_platforms</code>  <code>abstractmethod</code> <code>cached</code> <code>property</code>","text":"<p>A list of target platforms that are supported by the template. Possible values can be defined by the template plugin.</p>"},{"location":"types/","title":"Types","text":"<p>A list of all built-in types and what they translate to in the different target languages.</p>"},{"location":"types/#bool","title":"bool","text":"<p>boolean type</p> Target Typename Boxed cpp <code>bool</code> cppcli <code>bool</code> java <code>boolean</code> <code>Boolean</code> objc <code>BOOL</code> <code>NSNumber</code>"},{"location":"types/#i8","title":"i8","text":"<p>8 bit integer type</p> Target Typename Boxed cpp <code>int8_t</code> cppcli <code>char</code> java <code>byte</code> <code>Byte</code> objc <code>int8_t</code> <code>NSNumber</code>"},{"location":"types/#i16","title":"i16","text":"<p>16 bit integer type</p> Target Typename Boxed cpp <code>int16_t</code> cppcli <code>short</code> java <code>short</code> <code>Short</code> objc <code>int16_t</code> <code>NSNumber</code>"},{"location":"types/#i32","title":"i32","text":"<p>32 bit integer type</p> Target Typename Boxed cpp <code>int32_t</code> cppcli <code>int</code> java <code>int</code> <code>Integer</code> objc <code>int32_t</code> <code>NSNumber</code>"},{"location":"types/#i64","title":"i64","text":"<p>64 bit integer type</p> Target Typename Boxed cpp <code>int64_t</code> cppcli <code>__int64</code> java <code>long</code> <code>Long</code> objc <code>int64_t</code> <code>NSNumber</code>"},{"location":"types/#f32","title":"f32","text":"<p>float type</p> Target Typename Boxed cpp <code>float</code> cppcli <code>float</code> java <code>float</code> <code>Float</code> objc <code>float</code> <code>NSNumber</code>"},{"location":"types/#f64","title":"f64","text":"<p>double type</p> Target Typename Boxed cpp <code>double</code> cppcli <code>double</code> java <code>double</code> <code>Double</code> objc <code>double</code> <code>NSNumber</code>"},{"location":"types/#string","title":"string","text":"<p>UTF-8 string type</p> Target Typename Boxed cpp <code>std::string</code> cppcli <code>System::String</code> java <code>String</code> <code>String</code> objc <code>NSString</code> <code>NSString</code>"},{"location":"types/#binary","title":"binary","text":"<p>binary data</p> Target Typename Boxed cpp <code>std::vector&lt;uint8_t&gt;</code> cppcli <code>array&lt;System::Byte&gt;</code> java <code>byte[]</code> <code>byte[]</code> objc <code>NSData</code> <code>NSData</code>"},{"location":"types/#date","title":"date","text":"<p>point in time without timezone information in millisecond precision</p> Target Typename Boxed cpp <code>std::chrono::system_clock::time_point</code> cppcli <code>System::DateTime</code> java <code>java.time.Instant</code> <code>java.time.Instant</code> objc <code>NSDate</code> <code>NSDate</code>"},{"location":"types/#listt","title":"list&lt;T&gt;","text":"<p>a list of items of type T</p> Target Typename Boxed cpp <code>std::vector&lt;T&gt;</code> cppcli <code>System::Collections::Generic::List&lt;T&gt;</code> java <code>java.util.ArrayList&lt;T&gt;</code> <code>java.util.ArrayList</code> objc <code>NSArray&lt;T&gt;</code> <code>NSArray</code>"},{"location":"types/#sett","title":"set&lt;T&gt;","text":"<p>a set of unique items of type T</p> Target Typename Boxed cpp <code>std::unordered_set&lt;T&gt;</code> cppcli <code>System::Collections::Generic::HashSet&lt;T&gt;</code> java <code>java.util.HashSet&lt;T&gt;</code> <code>java.util.HashSet</code> objc <code>NSSet&lt;T&gt;</code> <code>NSSet</code>"},{"location":"types/#mapk-v","title":"map&lt;K, V&gt;","text":"<p>a map of key-value pairs of type K, V</p> Target Typename Boxed cpp <code>std::unordered_map&lt;K, V&gt;</code> cppcli <code>System::Collections::Generic::Dictionary&lt;K, V&gt;</code> java <code>java.util.HashMap&lt;K, V&gt;</code> <code>java.util.HashMap</code> objc <code>NSDictionary&lt;K, V&gt;</code> <code>NSDictionary</code>"}]}