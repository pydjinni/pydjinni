name: Build the python package

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
  release:
    types: [published]
jobs:
  test:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ "3.10", "3.11" ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dev dependencies
        run: pip install .[dev]
      - name: Run tests
        run: pytest --ignore cmake
  integration_test:
    name: Support Lib Unit-test & Integration tests
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '11'
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'
      - name: Install pydjinni
        run: pip install .
      - name: Cache CMake FetchContent
        uses: actions/cache@v3
        with:
          path: build/_deps
          key: ${{ runner.os }}-cmake-cache-${{ hashFiles('CMakeLists.txt') }}
      - name: Configure CMake
        run: cmake -B build
      - name: Build
        run: cmake --build build
      - name: Run Tests
        run: ctest --test-dir build --output-on-failure -C Debug
  cmake_test:
    name: CMake module tests
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'
      - name: Install dev dependencies
        run: pip install .[dev]
      - name: Run tests
        run: pytest cmake/tests
  test_docs:
    name: Test-build documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install doc dependencies
        run: pip install .[doc]
      - name: Build Documentation
        run: mkdocs build
      - uses: actions/upload-artifact@v3
        with:
          name: site
          path: site/
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install build dependencies
        run: pip install .[publish]
      - name: Build dist
        run: python -m build
      - name: Check created package
        run: twine check dist/*
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: [build, test, integration_test, cmake_test, test_docs]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install build dependencies
        run: pip install .[publish]
      - name: Publish package to PyPi
        env:
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          TWINE_USERNAME: __token__
        run: twine upload --disable-progress-bar dist/*.whl
  publish_docs:
    runs-on: ubuntu-latest
    needs: [publish]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install doc dependencies
        run: pip install .[doc]
      - name: Configure Git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      - name: Build and publish docs
        run: mike deploy --push --update-aliases $(git describe --tag) latest
