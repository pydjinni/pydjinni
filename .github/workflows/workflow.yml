name: Build the python package

on:
  workflow_dispatch:
  push:
    branches:
      - main
  release:
    types: [published]
  pull_request:
jobs:
  test:
    name: test
    strategy:
      matrix:
        os: [ ubuntu-24.04, windows-2022, macos-15 ]
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dev dependencies
        run: pip install .[dev]
      - name: Run tests
        run: pytest --ignore cmake
  integration_test:
    name: integration test
    strategy:
      matrix:
        os: [ ubuntu-24.04, windows-2022, macos-15 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'
      - name: Install pydjinni
        run: pip install .
      - name: Cache CMake FetchContent
        uses: actions/cache@v4
        with:
          path: build/_deps
          key: ${{ runner.os }}-cmake-cache-${{ hashFiles('CMakeLists.txt') }}
      - name: Configure CMake
        run: cmake -B build
      - name: Build
        run: cmake --build build
      - name: Run Tests
        run: ctest --test-dir build --output-on-failure -C Debug
  package_test:
    name: package test
    strategy:
      matrix:
        os: [ ubuntu-24.04, windows-2022, macos-15 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'
      - name: Install pydjinni
        run: pip install .
      - name: generate project from template
        run: pydjinni-init conan-cmake --output-dir test-library --platforms android,darwin,windows --target TestLibrary --cpp-namespace test::library --version 0.0.0
      - name: install requirements
        run : pip install -r requirements.txt
        working-directory: test-library
      - name: Set up Conan
        run: conan profile detect
      - name: package library for android
        run: pydjinni package aar android
        working-directory: test-library
      - name: package library for darwin
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: pydjinni package swiftpackage ios macos
        working-directory: test-library
      - name: package library for windows
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: pydjinni package nuget windows
        working-directory: test-library
  cmake_test:
    name: CMake test
    strategy:
      matrix:
        os: [ ubuntu-24.04, windows-2022, macos-15 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'
      - name: Install dev dependencies
        run: pip install .[dev]
      - name: Run tests
        run: pytest cmake/tests
  test_docs:
    name: documentation test
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install doc dependencies
        run: pip install .[doc]
      - name: Build Documentation
        run: mkdocs build
      - uses: actions/upload-artifact@v4
        with:
          name: site
          path: site/
  build:
    name: build
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install build dependencies
        run: pip install .[publish]
      - name: Build dist
        run: python -m build
      - name: Check created package
        run: twine check dist/*
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    name: publish
    runs-on: ubuntu-24.04
    needs: [build, test, integration_test, package_test, cmake_test, test_docs]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install build dependencies
        run: pip install .[publish]
      - name: Publish package to PyPI
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          TWINE_USERNAME: __token__
        run: twine upload --disable-progress-bar dist/*.whl
  publish_docs:
    name: publish documentation
    runs-on: ubuntu-24.04
    needs: [publish]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install doc dependencies
        run: pip install .[doc]
      - name: Configure Git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      - name: Build and publish docs
        run: mike deploy --push --update-aliases $(git describe --tag) latest
