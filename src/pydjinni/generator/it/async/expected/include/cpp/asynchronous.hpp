// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'async.pydjinni'
#pragma once
#include "asynchronous.hpp"
#include "multiply_callback.hpp"
#include "no_parameters_no_return_callback.hpp"
#include "pydjinni/coroutine/task.hpp"
#include "throwing_callback.hpp"
#include <cstdint>
#include <memory>
#include <optional>

namespace test::async_test {
class Asynchronous {
public:
    virtual ~Asynchronous() = default;
    static pydjinni::coroutine::task<std::shared_ptr<::test::async_test::Asynchronous>> get_instance() noexcept;
    virtual pydjinni::coroutine::task<int32_t> add(int32_t a, int32_t b) noexcept = 0;
    virtual pydjinni::coroutine::task<void> no_parameters_no_return() noexcept = 0;
    virtual pydjinni::coroutine::task<void> throwing_exception() = 0;
    virtual pydjinni::coroutine::task<int32_t> multiply_callback(const std::shared_ptr<::test::async_test::MultiplyCallback> & callback) noexcept = 0;
    virtual pydjinni::coroutine::task<void> no_parameters_no_return_callback(const std::shared_ptr<::test::async_test::NoParametersNoReturnCallback> & callback) noexcept = 0;
    virtual pydjinni::coroutine::task<void> throwing_callback(const std::shared_ptr<::test::async_test::ThrowingCallback> & callback) = 0;
    virtual pydjinni::coroutine::task<std::optional<int32_t>> returning_optional() noexcept = 0;
};
} // namespace test::async_test
