primitive_types = record {
    boolean_t: bool;
    byte_t: i8;
    short_t: i16;
    int_t: i32;
    long_t: i64;
    float_t: f32;
    double_t: f64;
    string_t: string;
    date_t: date;
} deriving (str, eq)

collection_types = record {
    int_list: list<i32>;
    string_list: list<string>;

    int_set: set<i32>;
    string_set: set<string>;

    int_int_map: map<i32, i32>;
    string_string_map: map<string, string>;
} deriving (str)

optional_types = record {
    int_optional: i32?;
    string_optional: string?;
} deriving (str)

binary_types = record {
    binary_t: binary;
    binary_optional: binary?;
}

base_record = record +any {
    value: i32;
}

nested_type = record {
    a: i32;
    b: list<list<i32>>;
} deriving (str)

parent_type = record {
    nested: nested_type;
} deriving (str)

helper = main interface +cpp {
    static get_primitive_types(record_type: primitive_types) -> primitive_types;
    static get_collection_types(record_type: collection_types) -> collection_types;
    static get_optional_types(record_type: optional_types) -> optional_types;
    static get_binary_types(record_type: binary_types) -> binary_types;
    static get_cpp_base_record() -> base_record;
    static get_host_base_record(record_type: base_record) -> base_record;
    static get_nested_type(parent: parent_type) -> parent_type;
}
