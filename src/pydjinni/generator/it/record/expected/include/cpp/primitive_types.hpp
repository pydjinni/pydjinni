// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'record.djinni'
#pragma once
#include <algorithm>
#include <ostream>
#include <version>
#ifdef __cpp_lib_format
#include <format>
#endif
#include <cstdint>
#include <string>
#include <chrono>

namespace test::record {
struct PrimitiveTypes final {
    const bool boolean_t;
    const int8_t byte_t;
    const int16_t short_t;
    const int32_t int_t;
    const int64_t long_t;
    const float float_t;
    const double double_t;
    const std::string string_t;
    const std::chrono::system_clock::time_point date_t;
    PrimitiveTypes(bool boolean_t_, int8_t byte_t_, int16_t short_t_, int32_t int_t_, int64_t long_t_, float float_t_, double double_t_, std::string string_t_, std::chrono::system_clock::time_point date_t_)
    : boolean_t(std::move(boolean_t_))
    , byte_t(std::move(byte_t_))
    , short_t(std::move(short_t_))
    , int_t(std::move(int_t_))
    , long_t(std::move(long_t_))
    , float_t(std::move(float_t_))
    , double_t(std::move(double_t_))
    , string_t(std::move(string_t_))
    , date_t(std::move(date_t_))
    {}

    friend bool operator==(const PrimitiveTypes& lhs, const PrimitiveTypes& rhs);
    friend bool operator!=(const PrimitiveTypes& lhs, const PrimitiveTypes& rhs);
    friend std::ostream& operator<<( std::ostream& os, PrimitiveTypes const& value ) {
        os << "::test::record::PrimitiveTypes(";
        os << "boolean_t=" << std::to_string(value.boolean_t) << ", ";
        os << "byte_t=" << std::to_string(value.byte_t) << ", ";
        os << "short_t=" << std::to_string(value.short_t) << ", ";
        os << "int_t=" << std::to_string(value.int_t) << ", ";
        os << "long_t=" << std::to_string(value.long_t) << ", ";
        os << "float_t=" << std::to_string(value.float_t) << ", ";
        os << "double_t=" << std::to_string(value.double_t) << ", ";
        os << "string_t=" << value.string_t << ", ";
        os << "date_t=" << std::to_string(value.date_t.time_since_epoch().count());
        os << ")";
        return os;
    }
};
}  // namespace test::record
#ifdef __cpp_lib_format
template <>
struct std::formatter<::test::record::PrimitiveTypes> {
    auto format(const ::test::record::PrimitiveTypes& obj, std::format_context& ctx) const {
        return std::format_to(ctx.out(), "::test::record::PrimitiveTypes(boolean_t={}, byte_t={}, short_t={}, int_t={}, long_t={}, float_t={}, double_t={}, string_t={}, date_t={})", obj.boolean_t, obj.byte_t, obj.short_t, obj.int_t, obj.long_t, obj.float_t, obj.double_t, obj.string_t, obj.date_t);
    }
};
#endif
