// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'record.pydjinni'
#pragma once
#include <algorithm>
#include <chrono>
#include <cstdint>
#include <format>
#include <string>

namespace test::record {
struct PrimitiveTypes final {
    const bool boolean_t;
    const int8_t byte_t;
    const int16_t short_t;
    const int32_t int_t;
    const int64_t long_t;
    const float float_t;
    const double double_t;
    const std::string string_t;
    const std::chrono::system_clock::time_point date_t;
    PrimitiveTypes(bool boolean_t, int8_t byte_t, int16_t short_t, int32_t int_t, int64_t long_t, float float_t, double double_t, std::string string_t, std::chrono::system_clock::time_point date_t)
    : boolean_t(std::move(boolean_t))
    , byte_t(std::move(byte_t))
    , short_t(std::move(short_t))
    , int_t(std::move(int_t))
    , long_t(std::move(long_t))
    , float_t(std::move(float_t))
    , double_t(std::move(double_t))
    , string_t(std::move(string_t))
    , date_t(std::move(date_t))
    {}
    friend bool operator==(const PrimitiveTypes& lhs, const PrimitiveTypes& rhs);
    friend bool operator!=(const PrimitiveTypes& lhs, const PrimitiveTypes& rhs);
};
std::string to_string(const ::test::record::PrimitiveTypes& value);
} // namespace test::record
template<>
struct std::formatter<::test::record::PrimitiveTypes> : std::formatter<std::string> {
    template<typename FormatContext>
    auto format(const ::test::record::PrimitiveTypes& value, FormatContext &ctx) const {
        return std::format_to(ctx.out(), "{}", test::record::to_string(value));
    }
};
