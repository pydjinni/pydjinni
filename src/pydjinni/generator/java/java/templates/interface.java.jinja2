{#
Copyright 2023 jothepro

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#}
{% extends "base.jinja2" %}
{% from "macros.jinja2" import data_type, return_type, parameters, comment %}

{% block header %}
{% if type_def.cpp.proxy %}
import java.util.concurrent.atomic.AtomicBoolean;
{% endif %}
{% endblock %}

{% block content %}
{% if type_def.comment %}
{{ comment(type_def) }}
{% endif %}
{% if type_def.deprecated %}
@Deprecated
{% endif %}
{{ type_def.java.class_modifier }}abstract class {{ type_def.java.name }} {
    {% if type_def.main and config.native_lib %}
    static {
        new {{ config.package|join('.') }}.native_lib.{{ config.native_lib }}Loader();
    }
    {% endif %}
    {% for method in type_def.methods %}
    {% if method.comment %}
    {{ comment(method, indentation=4) }}
    {% endif %}
    {% if method.deprecated %}
    @Deprecated
    {% endif %}
    public {{ "static" if method.static else "abstract" }} {{ return_type(method.return_type_ref) }} {{ method.java.name }}({{ parameters(method) }})
    {%- if method.static -%}
    {
        {{ "return " if method.return_type_ref }}CppProxy.{{ method.java.name }}(
        {%- for parameter in method.parameters -%}
        {{ parameter.java.name ~ (", " if not loop.last) }}
        {%- endfor -%}
        );
    };
    {% else -%}
    ;
    {% endif %}
    {% endfor %}
    {% if type_def.cpp.proxy %}
    private static final class CppProxy extends {{ type_def.java.name }} {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }
        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }
        {% for method in type_def.methods %}
        {% if method.static %}
        public static native {{ return_type(method.return_type_ref) }} {{ method.java.name }}({{ parameters(method) }});
        {% else %}
        @Override
        public {{ return_type(method.return_type_ref) }} {{ method.java.name }}({{ parameters(method) }}) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            {{ "return" if method.return_type_ref }} native_{{ method.java.name }}(this.nativeRef {{ (", " if method.parameters) ~ parameters(method, with_types=False) }});
        }
        private native {{ return_type(method.return_type_ref) }} native_{{ method.java.name }}(long _nativeRef{{ (", " if method.parameters) ~ parameters(method) }});
        {% endif %}
        {% endfor %}
    }
    {% endif %}
}
{% endblock %}
