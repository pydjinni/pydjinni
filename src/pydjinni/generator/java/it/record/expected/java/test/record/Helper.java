// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'record.djinni'
package test.record;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Helper {
    static {
        new test.record.native_lib.RecordTestJniLoader();
    }
    public static test.record.PrimitiveTypes getPrimitiveTypes(test.record.PrimitiveTypes recordType){
        return CppProxy.getPrimitiveTypes(recordType);
    };
    public static test.record.CollectionTypes getCollectionTypes(test.record.CollectionTypes recordType){
        return CppProxy.getCollectionTypes(recordType);
    };
    public static test.record.OptionalTypes getOptionalTypes(test.record.OptionalTypes recordType){
        return CppProxy.getOptionalTypes(recordType);
    };
    public static test.record.BinaryTypes getBinaryTypes(test.record.BinaryTypes recordType){
        return CppProxy.getBinaryTypes(recordType);
    };
    public static test.record.BaseRecord getCppBaseRecord(){
        return CppProxy.getCppBaseRecord();
    };
    public static test.record.BaseRecord getHostBaseRecord(test.record.BaseRecord recordType){
        return CppProxy.getHostBaseRecord(recordType);
    };
    public static test.record.ParentType getNestedType(test.record.ParentType parent){
        return CppProxy.getNestedType(parent);
    };
    private static final class CppProxy extends Helper {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }
        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }
        public static native test.record.PrimitiveTypes getPrimitiveTypes(test.record.PrimitiveTypes recordType);
        public static native test.record.CollectionTypes getCollectionTypes(test.record.CollectionTypes recordType);
        public static native test.record.OptionalTypes getOptionalTypes(test.record.OptionalTypes recordType);
        public static native test.record.BinaryTypes getBinaryTypes(test.record.BinaryTypes recordType);
        public static native test.record.BaseRecord getCppBaseRecord();
        public static native test.record.BaseRecord getHostBaseRecord(test.record.BaseRecord recordType);
        public static native test.record.ParentType getNestedType(test.record.ParentType parent);
    }
}
