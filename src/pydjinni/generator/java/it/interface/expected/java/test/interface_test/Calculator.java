// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'interface.djinni'
package test.interface_test;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Calculator {
    static {
        new test.interface_test.native_lib.InterfaceTestJniLoader();
    }
    public static test.interface_test.Calculator getInstance(){
        return CppProxy.getInstance();
    };
    /**
     * adds up two values
     * 
     * @param a the first value
     * @param b the second value
     * @return the sum of both values
     */
    public abstract byte add(byte a, byte b);
    public abstract byte getPlatformValue(test.interface_test.PlatformInterface platform);
    public abstract void noParametersNoReturn();
    public abstract void throwingException();
    private static final class CppProxy extends Calculator {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }
        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }
        public static native test.interface_test.Calculator getInstance();
        @Override
        public byte add(byte a, byte b) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_add(this.nativeRef , a, b);
        }
        private native byte native_add(long _nativeRef, byte a, byte b);
        @Override
        public byte getPlatformValue(test.interface_test.PlatformInterface platform) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPlatformValue(this.nativeRef , platform);
        }
        private native byte native_getPlatformValue(long _nativeRef, test.interface_test.PlatformInterface platform);
        @Override
        public void noParametersNoReturn() {
            assert !this.destroyed.get() : "trying to use a destroyed object";
             native_noParametersNoReturn(this.nativeRef );
        }
        private native void native_noParametersNoReturn(long _nativeRef);
        @Override
        public void throwingException() {
            assert !this.destroyed.get() : "trying to use a destroyed object";
             native_throwingException(this.nativeRef );
        }
        private native void native_throwingException(long _nativeRef);
    }
}
