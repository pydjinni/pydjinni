// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'interface.djinni'
package test.interface_test;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * @deprecated testing class deprecation annotation
 */
@Deprecated
public abstract class DeprecationTest {
    /**
     * @deprecated testing method deprecation annotation
     */
    @Deprecated
    public abstract int deprecationTestMethod();
    private static final class CppProxy extends DeprecationTest {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }
        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }
        @Override
        public int deprecationTestMethod() {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_deprecationTestMethod(this.nativeRef );
        }
        private native int native_deprecationTestMethod(long _nativeRef);
    }
}
