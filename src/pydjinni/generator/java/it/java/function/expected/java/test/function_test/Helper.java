// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'function.pydjinni'
package test.function_test;

public abstract class Helper {
    static {
        test.function_test.pydjinni.NativeFunctionTestJniLoader.loadLibrary();
    }
    public static void namedFunction(test.function_test.NamedFunction callback) {
        CppProxy.namedFunction(callback);
    };
    public static void anonymousFunction(test.function_test.Function_Cpp_Cppcli_Java_Objc_String_Bool callback) {
        CppProxy.anonymousFunction(callback);
    };
    public static test.function_test.NamedFunction cppNamedFunction() {
        return CppProxy.cppNamedFunction();
    };
    public static test.function_test.Function_Cpp_Cppcli_Java_Objc_String_Bool cppAnonymousFunction() {
        return CppProxy.cppAnonymousFunction();
    };
    public static test.function_test.Function_Cpp_Cppcli_Java_Objc_Void_Throws cppFunctionThrowingException() {
        return CppProxy.cppFunctionThrowingException();
    };
    public static test.function_test.Function_Cpp_Cppcli_Java_Objc_Void_Throws_Bar cppFunctionThrowingBarError() {
        return CppProxy.cppFunctionThrowingBarError();
    };
    public static void anonymousFunctionPassingRecord(test.function_test.Function_Cpp_Cppcli_Java_Objc_Foo_Bool callback) {
        CppProxy.anonymousFunctionPassingRecord(callback);
    };
    public static void functionParameterThrowing(test.function_test.ThrowingFunction callback) {
        CppProxy.functionParameterThrowing(callback);
    };
    public static test.function_test.NamedFunction optionalFunctionPassingNull(test.function_test.NamedFunction param) {
        return CppProxy.optionalFunctionPassingNull(param);
    };
    public static test.function_test.NamedFunction optionalFunctionPassingFunction(test.function_test.NamedFunction param) {
        return CppProxy.optionalFunctionPassingFunction(param);
    };
    private static final class CppProxy extends Helper {
        private final long nativeRef;

        static class CleanupTask implements Runnable {
            private final long nativeRef;
            CleanupTask(long nativeRef) {
                this.nativeRef = nativeRef;
            }

            @Override
            public void run() {
                nativeDestroy(this.nativeRef);
            }

            private native void nativeDestroy(long nativeRef);
        }

        private CppProxy(long nativeRef) {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            test.function_test.pydjinni.NativeCleaner.register(this, new CleanupTask(nativeRef));
        }

        public static native void namedFunction(test.function_test.NamedFunction callback);
        public static native void anonymousFunction(test.function_test.Function_Cpp_Cppcli_Java_Objc_String_Bool callback);
        public static native test.function_test.NamedFunction cppNamedFunction();
        public static native test.function_test.Function_Cpp_Cppcli_Java_Objc_String_Bool cppAnonymousFunction();
        public static native test.function_test.Function_Cpp_Cppcli_Java_Objc_Void_Throws cppFunctionThrowingException();
        public static native test.function_test.Function_Cpp_Cppcli_Java_Objc_Void_Throws_Bar cppFunctionThrowingBarError();
        public static native void anonymousFunctionPassingRecord(test.function_test.Function_Cpp_Cppcli_Java_Objc_Foo_Bool callback);
        public static native void functionParameterThrowing(test.function_test.ThrowingFunction callback);
        public static native test.function_test.NamedFunction optionalFunctionPassingNull(test.function_test.NamedFunction param);
        public static native test.function_test.NamedFunction optionalFunctionPassingFunction(test.function_test.NamedFunction param);
    }
}
