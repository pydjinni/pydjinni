// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'async.pydjinni'
package test.async_test;

public abstract class Asynchronous {
    static {
        test.async_test.pydjinni.NativeAsyncTestJniLoader.loadLibrary();
    }
    public static java.util.concurrent.CompletableFuture<test.async_test.Asynchronous> getInstance() {
        return CppProxy.getInstance();
    };
    public abstract java.util.concurrent.CompletableFuture<Integer> add(int a, int b);
    public abstract java.util.concurrent.CompletableFuture<Void> noParametersNoReturn();
    public abstract java.util.concurrent.CompletableFuture<Void> throwingException();
    public abstract java.util.concurrent.CompletableFuture<Integer> multiplyCallback(test.async_test.MultiplyCallback callback);
    public abstract java.util.concurrent.CompletableFuture<Void> noParametersNoReturnCallback(test.async_test.NoParametersNoReturnCallback callback);
    public abstract java.util.concurrent.CompletableFuture<Void> throwingCallback(test.async_test.ThrowingCallback callback);
    private static final class CppProxy extends Asynchronous {
        private final long nativeRef;

        static class CleanupTask implements Runnable {
            private final long nativeRef;
            CleanupTask(long nativeRef) {
                this.nativeRef = nativeRef;
            }

            @Override
            public void run() {
                nativeDestroy(this.nativeRef);
            }

            private native void nativeDestroy(long nativeRef);
        }

        private CppProxy(long nativeRef) {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            test.async_test.pydjinni.NativeCleaner.register(this, new CleanupTask(nativeRef));
        }

        public static native java.util.concurrent.CompletableFuture<test.async_test.Asynchronous> getInstance();
        @Override
        public java.util.concurrent.CompletableFuture<Integer> add(int a, int b) {
            return native_add(this.nativeRef , a, b);
        }
        private native java.util.concurrent.CompletableFuture<Integer> native_add(long _nativeRef, int a, int b);
        @Override
        public java.util.concurrent.CompletableFuture<Void> noParametersNoReturn() {
            return native_noParametersNoReturn(this.nativeRef );
        }
        private native java.util.concurrent.CompletableFuture<Void> native_noParametersNoReturn(long _nativeRef);
        @Override
        public java.util.concurrent.CompletableFuture<Void> throwingException() {
            return native_throwingException(this.nativeRef );
        }
        private native java.util.concurrent.CompletableFuture<Void> native_throwingException(long _nativeRef);
        @Override
        public java.util.concurrent.CompletableFuture<Integer> multiplyCallback(test.async_test.MultiplyCallback callback) {
            return native_multiplyCallback(this.nativeRef , callback);
        }
        private native java.util.concurrent.CompletableFuture<Integer> native_multiplyCallback(long _nativeRef, test.async_test.MultiplyCallback callback);
        @Override
        public java.util.concurrent.CompletableFuture<Void> noParametersNoReturnCallback(test.async_test.NoParametersNoReturnCallback callback) {
            return native_noParametersNoReturnCallback(this.nativeRef , callback);
        }
        private native java.util.concurrent.CompletableFuture<Void> native_noParametersNoReturnCallback(long _nativeRef, test.async_test.NoParametersNoReturnCallback callback);
        @Override
        public java.util.concurrent.CompletableFuture<Void> throwingCallback(test.async_test.ThrowingCallback callback) {
            return native_throwingCallback(this.nativeRef , callback);
        }
        private native java.util.concurrent.CompletableFuture<Void> native_throwingCallback(long _nativeRef, test.async_test.ThrowingCallback callback);
    }
}
