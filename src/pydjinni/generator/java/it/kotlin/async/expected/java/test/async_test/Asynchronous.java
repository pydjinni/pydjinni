// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'async.pydjinni'
package test.async_test;

public abstract class Asynchronous {
    static {
        test.async_test.pydjinni.NativeAsyncTestKotlinJniLoader.loadLibrary();
    }
    public static java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<test.async_test.@org.jetbrains.annotations.NotNull Asynchronous> getInstance() {
        return CppProxy.getInstance();
    };
    public abstract java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<@org.jetbrains.annotations.NotNull Integer> add(@org.jetbrains.annotations.NotNull int a, @org.jetbrains.annotations.NotNull int b);
    public abstract java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<Void> noParametersNoReturn();
    public abstract java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<Void> throwingException();
    public abstract java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<@org.jetbrains.annotations.NotNull Integer> multiplyCallback(test.async_test.@org.jetbrains.annotations.NotNull MultiplyCallback callback);
    public abstract java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<Void> noParametersNoReturnCallback(test.async_test.@org.jetbrains.annotations.NotNull NoParametersNoReturnCallback callback);
    public abstract java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<Void> throwingCallback(test.async_test.@org.jetbrains.annotations.NotNull ThrowingCallback callback);
    public abstract java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<@org.jetbrains.annotations.Nullable Integer> returningOptional();
    private static final class CppProxy extends Asynchronous {
        private final long nativeRef;

        static class CleanupTask implements Runnable {
            private final long nativeRef;
            CleanupTask(long nativeRef) {
                this.nativeRef = nativeRef;
            }

            @Override
            public void run() {
                nativeDestroy(this.nativeRef);
            }

            private native void nativeDestroy(long nativeRef);
        }

        private CppProxy(long nativeRef) {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            test.async_test.pydjinni.NativeCleaner.register(this, new CleanupTask(nativeRef));
        }

        public static native java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<test.async_test.@org.jetbrains.annotations.NotNull Asynchronous> getInstance();
        @Override
        public java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<@org.jetbrains.annotations.NotNull Integer> add(@org.jetbrains.annotations.NotNull int a, @org.jetbrains.annotations.NotNull int b) {
            return native_add(this.nativeRef , a, b);
        }
        private native java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<@org.jetbrains.annotations.NotNull Integer> native_add(long _nativeRef, @org.jetbrains.annotations.NotNull int a, @org.jetbrains.annotations.NotNull int b);
        @Override
        public java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<Void> noParametersNoReturn() {
            return native_noParametersNoReturn(this.nativeRef );
        }
        private native java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<Void> native_noParametersNoReturn(long _nativeRef);
        @Override
        public java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<Void> throwingException() {
            return native_throwingException(this.nativeRef );
        }
        private native java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<Void> native_throwingException(long _nativeRef);
        @Override
        public java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<@org.jetbrains.annotations.NotNull Integer> multiplyCallback(test.async_test.@org.jetbrains.annotations.NotNull MultiplyCallback callback) {
            return native_multiplyCallback(this.nativeRef , callback);
        }
        private native java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<@org.jetbrains.annotations.NotNull Integer> native_multiplyCallback(long _nativeRef, test.async_test.@org.jetbrains.annotations.NotNull MultiplyCallback callback);
        @Override
        public java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<Void> noParametersNoReturnCallback(test.async_test.@org.jetbrains.annotations.NotNull NoParametersNoReturnCallback callback) {
            return native_noParametersNoReturnCallback(this.nativeRef , callback);
        }
        private native java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<Void> native_noParametersNoReturnCallback(long _nativeRef, test.async_test.@org.jetbrains.annotations.NotNull NoParametersNoReturnCallback callback);
        @Override
        public java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<Void> throwingCallback(test.async_test.@org.jetbrains.annotations.NotNull ThrowingCallback callback) {
            return native_throwingCallback(this.nativeRef , callback);
        }
        private native java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<Void> native_throwingCallback(long _nativeRef, test.async_test.@org.jetbrains.annotations.NotNull ThrowingCallback callback);
        @Override
        public java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<@org.jetbrains.annotations.Nullable Integer> returningOptional() {
            return native_returningOptional(this.nativeRef );
        }
        private native java.util.concurrent.@org.jetbrains.annotations.NotNull CompletableFuture<@org.jetbrains.annotations.Nullable Integer> native_returningOptional(long _nativeRef);
    }
}
