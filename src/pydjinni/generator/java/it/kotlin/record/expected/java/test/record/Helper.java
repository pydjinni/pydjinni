// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'record.pydjinni'
package test.record;

public abstract class Helper {
    static {
        test.record.pydjinni.NativeRecordTestKotlinJniLoader.loadLibrary();
    }
    @org.jetbrains.annotations.NotNull
    public static test.record.PrimitiveTypes getPrimitiveTypes(@org.jetbrains.annotations.NotNull test.record.PrimitiveTypes recordType){
        return CppProxy.getPrimitiveTypes(recordType);
    };
    @org.jetbrains.annotations.NotNull
    public static test.record.CollectionTypes getCollectionTypes(@org.jetbrains.annotations.NotNull test.record.CollectionTypes recordType){
        return CppProxy.getCollectionTypes(recordType);
    };
    @org.jetbrains.annotations.NotNull
    public static test.record.OptionalTypes getOptionalTypes(@org.jetbrains.annotations.NotNull test.record.OptionalTypes recordType){
        return CppProxy.getOptionalTypes(recordType);
    };
    @org.jetbrains.annotations.NotNull
    public static test.record.BinaryTypes getBinaryTypes(@org.jetbrains.annotations.NotNull test.record.BinaryTypes recordType){
        return CppProxy.getBinaryTypes(recordType);
    };
    @org.jetbrains.annotations.NotNull
    public static test.record.BaseRecord getCppBaseRecord(){
        return CppProxy.getCppBaseRecord();
    };
    @org.jetbrains.annotations.NotNull
    public static test.record.BaseRecord getHostBaseRecord(@org.jetbrains.annotations.NotNull test.record.BaseRecord recordType){
        return CppProxy.getHostBaseRecord(recordType);
    };
    @org.jetbrains.annotations.NotNull
    public static test.record.ParentType getNestedType(@org.jetbrains.annotations.NotNull test.record.ParentType parent){
        return CppProxy.getNestedType(parent);
    };
    private static final class CppProxy extends Helper {
        private final long nativeRef;

        static class CleanupTask implements Runnable {
            private final long nativeRef;
            CleanupTask(long nativeRef) {
                this.nativeRef = nativeRef;
            }

            @Override
            public void run() {
                nativeDestroy(this.nativeRef);
            }

            private native void nativeDestroy(long nativeRef);
        }

        private CppProxy(long nativeRef) {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            test.record.pydjinni.NativeCleaner.register(this, new CleanupTask(nativeRef));
        }

        public static native test.record.PrimitiveTypes getPrimitiveTypes(@org.jetbrains.annotations.NotNull test.record.PrimitiveTypes recordType);
        public static native test.record.CollectionTypes getCollectionTypes(@org.jetbrains.annotations.NotNull test.record.CollectionTypes recordType);
        public static native test.record.OptionalTypes getOptionalTypes(@org.jetbrains.annotations.NotNull test.record.OptionalTypes recordType);
        public static native test.record.BinaryTypes getBinaryTypes(@org.jetbrains.annotations.NotNull test.record.BinaryTypes recordType);
        public static native test.record.BaseRecord getCppBaseRecord();
        public static native test.record.BaseRecord getHostBaseRecord(@org.jetbrains.annotations.NotNull test.record.BaseRecord recordType);
        public static native test.record.ParentType getNestedType(@org.jetbrains.annotations.NotNull test.record.ParentType parent);
    }
}
