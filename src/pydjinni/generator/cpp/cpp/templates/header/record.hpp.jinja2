{#
Copyright 2023 jothepro

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#}
{% extends "base.jinja2" %}
{% from "macros.jinja2" import comment, deprecated %}

{% block header %}
#pragma once
#include <algorithm>
{% if 'str' in type_def.deriving %}
#include <ostream>
#include <iomanip>
#include <version>
#ifdef __cpp_lib_format
#include <format>
#endif
{% endif %}
{% endblock %}

{% block content %}
{% if type_def.cpp.base_type %}
struct {{ type_def.cpp.derived_name }};
{% endif %}
{% if type_def.comment %}
{{ comment(type_def) }}
{% endif %}
{% if type_def.deprecated %}
{{ deprecated(type_def) }}
{% endif %}
struct {{ type_def.cpp.name }}{{ " final" if not type_def.cpp.base_type }} {
{% for field in type_def.fields %}
    {% if field.comment %}
    {{ comment(field, indentation=4) }}
    {% endif %}
    const {{ field.cpp.type_spec }} {{ field.cpp.name }};
{% endfor %}
    {{ type_def.cpp.name }}(
    {%- for field in type_def.fields %}
        {{- field.cpp.type_spec }} {{ field.cpp.name ~ "_" ~ (", " if not loop.last) }}
    {%- endfor %})
    {% for field in type_def.fields %}
    {{ (": " if loop.first else ', ') ~ field.cpp.name }}(std::move({{ field.cpp.name }}_))
    {% endfor %}
    {}

{% if 'eq' in type_def.deriving and type_def.fields %}
    friend bool operator==(const {{ type_def.cpp.name }}& lhs, const {{ type_def.cpp.name }}& rhs);
    friend bool operator!=(const {{ type_def.cpp.name }}& lhs, const {{ type_def.cpp.name }}& rhs);
{% endif %}
{% if 'ord' in type_def.deriving and type_def.fields %}
    friend bool operator<(const {{ type_def.cpp.name }}& lhs, const {{ type_def.cpp.name }}& rhs);
    friend bool operator>(const {{ type_def.cpp.name }}& lhs, const {{ type_def.cpp.name }}& rhs);
    friend bool operator<=(const {{ type_def.cpp.name }}& lhs, const {{ type_def.cpp.name }}& rhs);
    friend bool operator>=(const {{ type_def.cpp.name }}& lhs, const {{ type_def.cpp.name }}& rhs);
{% endif %}
{% if 'str' in type_def.deriving %}
    friend std::ostream& operator<<(std::ostream& os, {{ type_def.cpp.name }} const& value);
{% endif %}
};
{% endblock %}
