{#
Copyright 2023 jothepro

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#}
{% extends "base.jinja2" %}
{% from "macros.jinja2" import translator %}

{% block header %}
{% for header in type_def.dependencies | headers('objc') -%}
#import {{ header }}
{% endfor %}
{% for header in type_def.dependencies | headers('objcpp') -%}
#include {{ header }}
{% endfor %}
#import {{ type_def.objcpp.header | quote }}
#import {{ type_def.objc.header | quote }}
#import "pydjinni/objc/error.h"
#import "pydjinni/cpp_wrapper_cache.h"
#import "pydjinni/objc_wrapper_cache.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "PyDjinni requires ARC to be enabled for this file");
{% endblock %}


{% block no_namespace %}
@interface {{ type_def.objc.typename }}
    {%- if "objc" in type_def.targets -%}
        CppProxy : NSObject<{{ type_def.objc.typename }}>
    {%- else -%}
        ()
    {% endif %}

- (id)initWithCpp:(const std::shared_ptr<{{ type_def.cpp.typename }}>&)cppRef;
@end

@implementation {{ type_def.objc.typename ~ ("CppProxy" if "objc" in type_def.targets) }} {
    ::pydjinni::CppProxyCache::Handle<std::shared_ptr<{{ type_def.cpp.typename }}>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<{{ type_def.cpp.typename }}>&)cppRef {
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

{% for method in type_def.methods %}
{{ method.objc.specifier }} ({{ method.objc.type_decl}}){{ method.objc.name }}
    {%- for parameter in method.parameters -%}
        {{ ":" if loop.first else (" " ~ parameter.objc.name ~ ":") }}({{ parameter.objc.type_decl}}){{ parameter.objc.name }}
    {% endfor %}
    {
    try {
        {% if method.deprecated and not type_def.deprecated %}
        #pragma clang diagnostic push
        #pragma clang diagnostic ignored "-Wdeprecated-declarations"
        {% endif %}
        {{ "auto objcpp_result_ = " if method.return_type_ref }}
        {%- if method.static -%}
            {{ type_def.cpp.typename }}::
        {%- else -%}
            _cppRefHandle.get()->
        {%- endif -%}
        {{ method.cpp.name }}(
        {%- for parameter in method.parameters -%}
            {{ translator(parameter.type_ref) }}::toCpp({{ parameter.objc.name }}){{ ", " if not loop.last }}
        {%- endfor -%}
        );
        {% if method.deprecated and not type_def.deprecated %}
        #pragma clang diagnostic pop
        {% endif %}
        {% if method.return_type_ref %}
        return {{ translator(method.return_type_ref) }}::fromCpp(objcpp_result_);
        {% endif %}
    } DJINNI_TRANSLATE_EXCEPTIONS()
}
{% endfor %}

{% if "objc" not in type_def.targets %}
namespace {{ type_def.objcpp.namespace }} {

auto {{ type_def.objcpp.translator }}::toCpp(ObjcType objc) -> CppType {
        if(!objc) {
            return nullptr;
        }
        return objc->_cppRefHandle.get();
}
auto {{ type_def.objcpp.translator }}::fromCppOpt(const CppOptType& cpp) -> ObjcType {
        if(!cpp) {
            return nil;
        }
        return ::pydjinni::get_cpp_proxy<::{{ type_def.objc.typename }}>(cpp);
}

} // namespace {{ type_def.objcpp.namespace }}
{% endif %}
@end
{% endblock %}

{% block content %}
{% if "objc" in type_def.targets %}
class {{ type_def.objcpp.name }}::ObjcProxy final : public {{ type_def.cpp.typename }}, private ::pydjinni::ObjcProxyBase<ObjcType> {
    friend class {{ type_def.objcpp.translator }};
public:
    using ObjcProxyBase::ObjcProxyBase;
    {% for method in type_def.methods %}
    {{ method.cpp.type_spec }} {{ method.cpp.name }}(
    {%- for parameter in method.parameters -%}
        {{ parameter.cpp.type_spec }} {{ parameter.cpp.name}} {{ ", " if not loop.last }}
    {%- endfor -%}
    ) override {
        @autoreleasepool {
            {% if method.deprecated and not type_def.deprecated %}
            #pragma clang diagnostic push
            #pragma clang diagnostic ignored "-Wdeprecated-declarations"
            {% endif %}
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() {{ method.objc.name }}
            {%- for parameter in method.parameters -%}
                {{ " " ~ parameter.objc.name if not loop.first }}:({{ translator(parameter.type_ref) }}::fromCpp({{ parameter.cpp.name }}))
            {%- endfor -%}
            ];
            {% if method.deprecated and not type_def.deprecated %}
            #pragma clang diagnostic pop
            {% endif %}
            {% if method.return_type_ref.type_def %}
            return {{ translator(method.return_type_ref) }}::toCpp(objcpp_result_);
            {% endif %}
        }
    }
    {% endfor %}
};

auto {{ type_def.objcpp.name }}::toCpp(ObjcType objc) -> CppType {
    if(!objc) {
        return nullptr;
    }
    return ::pydjinni::get_objc_proxy<ObjcProxy>(objc);
}

auto {{ type_def.objcpp.name }}::fromCppOpt(const CppOptType& cpp) -> ObjcType {
    if(!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).djinni_private_get_proxied_objc_object();
}
{% endif %}
{% endblock %}
