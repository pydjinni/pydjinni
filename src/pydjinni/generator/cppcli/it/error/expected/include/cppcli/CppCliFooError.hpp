// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'error.pydjinni'
#pragma once
#include "foo_error.hpp"
#include "pydjinni/cppcli/Marshal.hpp"
namespace Test::Error::CppCli {
/**
 * <summary>
 * <para>error comment</para>
 * </summary>
 */
public ref class FooError abstract : System::Exception {
public:
    FooError();
    FooError(System::String^ message);
    ref class SomethingWrong;
    ref class SomethingElseWrong;
    ref class SomethingWithParameters;
};

/**
 * <summary>
 * <para>error code comment</para>
 * </summary>
 */
ref class FooError::SomethingWrong : FooError {
public:
    SomethingWrong();
    SomethingWrong(System::String^ message);

internal:
    using CppType = ::test::error::FooError::SomethingWrong;
    using CsType = SomethingWrong^;

    static CppType ToCpp(CsType cs);
    static CsType FromCpp(const CppType& cpp);
private:
};
ref class FooError::SomethingElseWrong : FooError {
public:
    SomethingElseWrong();
    SomethingElseWrong(System::String^ message);

internal:
    using CppType = ::test::error::FooError::SomethingElseWrong;
    using CsType = SomethingElseWrong^;

    static CppType ToCpp(CsType cs);
    static CsType FromCpp(const CppType& cpp);
private:
};
/**
 * <summary>
 * <para>an error with parameters</para>
 * </summary>
 * <param name="parameter">is an important additional information</param>
 */
ref class FooError::SomethingWithParameters : FooError {
public:
    SomethingWithParameters(char parameter);
    SomethingWithParameters(char parameter, System::String^ message);

    /**
     * <summary>
     * <para>is an important additional information</para>
     * </summary>
     */
    property char Parameter
    {
        char get();
    }
internal:
    using CppType = ::test::error::FooError::SomethingWithParameters;
    using CsType = SomethingWithParameters^;

    static CppType ToCpp(CsType cs);
    static CsType FromCpp(const CppType& cpp);
private:
    char _parameter;
};
} // namespace Test::Error::CppCli
