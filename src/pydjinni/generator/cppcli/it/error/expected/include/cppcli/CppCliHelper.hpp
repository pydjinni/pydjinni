// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'error.pydjinni'
#pragma once
#include "CppCliAsyncThrowingCallback.hpp"
#include "CppCliBarError.hpp"
#include "CppCliFooError.hpp"
#include "CppCliThrowingCallback.hpp"
#include "helper.hpp"
#include "pydjinni/coroutine/schedule.hpp"
#include "pydjinni/coroutine/task.hpp"
#include "pydjinni/cppcli/Marshal.hpp"
namespace Test::Error::CppCli {
public ref class Helper abstract {
public:
    /**
     * <exception cref="::Test::Error::CppCli::FooError">when something goes wrong</exception>
     * <exception cref="::Test::Error::CppCli::BarError">when something else goes wrong</exception>
     */
    static void ThrowingError();
    static void ThrowingWithParameters();
    static System::Threading::Tasks::Task^ ThrowingAsync();
    static System::Threading::Tasks::Task<bool>^ ThrowingAsyncWithReturnValue();
    static void ThrowingCallbackError(::Test::Error::CppCli::ThrowingCallback^ callback);
    static System::Threading::Tasks::Task^ ThrowingAsyncCallbackError(::Test::Error::CppCli::AsyncThrowingCallback^ callback);
    virtual void NonstaticThrowingError() abstract;
internal:
    using CppType = std::shared_ptr<::test::error::Helper>;
    using CppOptType = std::shared_ptr<::test::error::Helper>;
    using CsType = Helper^;

    static CppType ToCpp(CsType cs);
    static CsType FromCppOpt(const CppOptType& cpp);
    static CsType FromCpp(const CppType& cpp) { return FromCppOpt(cpp); }
};
} // namespace Test::Error::CppCli
