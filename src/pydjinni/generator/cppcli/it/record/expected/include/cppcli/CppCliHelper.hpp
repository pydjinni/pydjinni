// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'record.djinni'
#pragma once
#include "helper.hpp"
#include <memory>
#include "CppCliPrimitiveTypes.hpp"
#include "CppCliCollectionTypes.hpp"
#include "CppCliOptionalTypes.hpp"
#include "CppCliBinaryTypes.hpp"
#include "CppCliBaseRecord.hpp"

namespace Test::Record::CppCli {
public ref class Helper abstract {
public:
    static ::Test::Record::CppCli::PrimitiveTypes^ GetPrimitiveTypes(::Test::Record::CppCli::PrimitiveTypes^ recordType);
    static ::Test::Record::CppCli::CollectionTypes^ GetCollectionTypes(::Test::Record::CppCli::CollectionTypes^ recordType);
    static ::Test::Record::CppCli::OptionalTypes^ GetOptionalTypes(::Test::Record::CppCli::OptionalTypes^ recordType);
    static ::Test::Record::CppCli::BinaryTypes^ GetBinaryTypes(::Test::Record::CppCli::BinaryTypes^ recordType);
    static ::Test::Record::CppCli::BaseRecord^ GetCppBaseRecord();
    static ::Test::Record::CppCli::BaseRecord^ GetHostBaseRecord(::Test::Record::CppCli::BaseRecord^ recordType);
internal:
    using CppType = std::shared_ptr<::test::record::Helper>;
    using CppOptType = std::shared_ptr<::test::record::Helper>;
    using CsType = Helper^;

    static CppType ToCpp(CsType cs);
    static CsType FromCppOpt(const CppOptType& cpp);
    static CsType FromCpp(const CppType& cpp) { return FromCppOpt(cpp); }
};
}  // namespace Test::Record::CppCli
