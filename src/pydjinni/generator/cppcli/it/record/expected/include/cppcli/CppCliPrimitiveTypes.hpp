// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'record.djinni'
#pragma once
#include "primitive_types.hpp"

namespace Test::Record::CppCli {
[System::Serializable]
public ref class PrimitiveTypes sealed  {
public:
    PrimitiveTypes(bool booleanT, char byteT, short shortT, int intT, __int64 longT, float floatT, double doubleT, System::String^ stringT, System::DateTime dateT);

    property bool BooleanT
    {
        bool get();
    }
    property char ByteT
    {
        char get();
    }
    property short ShortT
    {
        short get();
    }
    property int IntT
    {
        int get();
    }
    property __int64 LongT
    {
        __int64 get();
    }
    property float FloatT
    {
        float get();
    }
    property double DoubleT
    {
        double get();
    }
    property System::String^ StringT
    {
        System::String^ get();
    }
    property System::DateTime DateT
    {
        System::DateTime get();
    }

    System::String^ ToString() override;
internal:
    using CppType = ::test::record::PrimitiveTypes;
    using CsType = PrimitiveTypes^;

    static CppType ToCpp(CsType cs);
    static CsType FromCpp(const CppType& cpp);
private:
    bool _booleanT;
    char _byteT;
    short _shortT;
    int _intT;
    __int64 _longT;
    float _floatT;
    double _doubleT;
    System::String^ _stringT;
    System::DateTime _dateT;
};
}  // namespace Test::Record::CppCli
