// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'function.pydjinni'
#pragma once
#include "CppCliFunctionCppCppcliJavaObjcYamlFooBool.hpp"
#include "CppCliFunctionCppCppcliJavaObjcYamlStringBool.hpp"
#include "CppCliFunctionCppCppcliJavaObjcYamlVoidThrows.hpp"
#include "CppCliFunctionCppCppcliJavaObjcYamlVoidThrowsBar.hpp"
#include "CppCliNamedFunction.hpp"
#include "CppCliThrowingFunction.hpp"
#include "helper.hpp"
namespace Test::Function::CppCli {
public ref class Helper abstract {
public:
    static void NamedFunction(::Test::Function::CppCli::NamedFunction^ callback);
    static void AnonymousFunction(System::Func<System::String^, bool>^ callback);
    static ::Test::Function::CppCli::NamedFunction^ CppNamedFunction();
    static System::Func<System::String^, bool>^ CppAnonymousFunction();
    static System::Action^ CppFunctionThrowingException();
    static System::Action^ CppFunctionThrowingBarError();
    static void AnonymousFunctionPassingRecord(System::Func<::Test::Function::CppCli::Foo^, bool>^ callback);
    static void FunctionParameterThrowing(::Test::Function::CppCli::ThrowingFunction^ callback);
    static ::Test::Function::CppCli::NamedFunction^ OptionalFunctionPassingNull(::Test::Function::CppCli::NamedFunction^ param);
    static ::Test::Function::CppCli::NamedFunction^ OptionalFunctionPassingFunction(::Test::Function::CppCli::NamedFunction^ param);
internal:
    using CppType = std::shared_ptr<::test::function::Helper>;
    using CppOptType = std::shared_ptr<::test::function::Helper>;
    using CsType = Helper^;

    static CppType ToCpp(CsType cs);
    static CsType FromCppOpt(const CppOptType& cpp);
    static CsType FromCpp(const CppType& cpp) { return FromCppOpt(cpp); }
};
} // namespace Test::Function::CppCli
