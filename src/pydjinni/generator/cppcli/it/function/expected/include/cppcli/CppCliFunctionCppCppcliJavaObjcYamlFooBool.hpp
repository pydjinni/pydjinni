// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by PyDjinni from 'function.pydjinni'
#pragma once
#include "CppCliFoo.hpp"
#include "function_cpp_cppcli_java_objc_yaml_foo_bool.hpp"
#include "pydjinni/cppcli/Marshal.hpp"
#include <functional>
#include <vcclr.h>
namespace Test::Function::CppCli {
ref class _FunctionCppCppcliJavaObjcYamlFooBoolDelegateCppProxy
{
public:
    _FunctionCppCppcliJavaObjcYamlFooBoolDelegateCppProxy(const std::function<bool(::test::function::Foo)>& lambda) : _lambda(new std::function<bool(::test::function::Foo)>(lambda)) {}
    ~_FunctionCppCppcliJavaObjcYamlFooBoolDelegateCppProxy();
    !_FunctionCppCppcliJavaObjcYamlFooBoolDelegateCppProxy();

    bool Invoke(::Test::Function::CppCli::Foo^ param);
private:
    std::function<bool(::test::function::Foo)>* _lambda;
};

class _FunctionCppCppcliJavaObjcYamlFooBoolDelegate {
public:
    using CppType = std::function<bool(::test::function::Foo)>;
    using CppOptType = std::function<bool(::test::function::Foo)>;
    using CsType = System::Func<::Test::Function::CppCli::Foo^, bool>^;

    static CppType ToCpp(gcroot<CsType> delegate);
    static CsType FromCppOpt(const CppOptType& cpp);
    static CsType FromCpp(const CppType& cpp);
};
} // namespace Test::Function::CppCli
