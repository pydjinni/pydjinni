{#
Copyright 2024 jothepro

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#}
{% extends "base.jinja2" %}
{% from "macros.jinja2" import comment, deprecated %}

{% block header %}
#pragma once
#include {{ type_def.cppcli.header | quote }}
{% for header in type_def.dependencies | headers('cpp') -%}
#include {{ header }}
{% endfor %}
#include "pydjinni/cppcli/Error.hpp"
#include "pydjinni/cppcli/WrapperCache.hpp"
#include "pydjinni/cppcli/Marshal.hpp"
{% endblock %}

{% block content %}
{% if 'cpp' in type_def.targets %}
{% for method in type_def.methods|selectattr("static") %}
{{ method.cppcli.typename }} {{ type_def.cppcli.name }}::{{ method.cppcli.name }}(
{%- for param in method.parameters -%}
    {{ param.cppcli.typename }} {{ param.cppcli.name ~ (", " if not loop.last) }}
{%- endfor -%}
)
{
    {% if method.deprecated and not type_def.deprecated %}
    #pragma warning( push )
    #pragma warning( disable : 4996 )
    {% endif %}
    try {
        {{ "auto cpp_result = " if method.return_type_ref -}}
        {{ type_def.cpp.typename }}::{{ method.cpp.name }}(
        {%- for param in method.parameters -%}
            {{ param.cppcli.translator }}::ToCpp({{ param.cppcli.name }}){{ "," if not loop.last }}
        {%- endfor -%});
        {% if method.return_type_ref %}
        return {{ method.cppcli.translator }}::FromCpp(cpp_result);
        {% endif %}
    } DJINNI_TRANSLATE_EXCEPTIONS()
    {% if method.return_type_ref %}
    return {}; // Unreachable! (Silencing compiler warnings.)
    {% endif %}
    {% if method.deprecated and not type_def.deprecated %}
    #pragma warning( pop )
    {% endif %}
}
{% endfor %}

ref class {{ type_def.cppcli.name }}CppProxy : public {{ type_def.cppcli.name }} {
    using CppType = std::shared_ptr<{{ type_def.cpp.typename }}>;
    using HandleType = ::pydjinni::CppProxyCache::Handle<CppType>;
public:
    {{ type_def.cppcli.name }}CppProxy(const CppType& cppRef) : _cppRefHandle(new HandleType(cppRef)) {}

    {% for method in type_def.methods|selectattr("static", '==', False) %}
    {{ method.cppcli.typename }} {{ method.cppcli.name }}(
    {%- for param in method.parameters -%}
        {{ param.cppcli.typename }} {{ param.cppcli.name ~ (", " if not loop.last) }}
    {%- endfor -%}
    ) override
    {
        {% if method.deprecated and not type_def.deprecated %}
        #pragma warning( push )
        #pragma warning( disable : 4996 )
        {% endif %}
        try {
            {{ "auto cpp_result = " if method.return_type_ref -}}
            _cppRefHandle->get()->{{ method.cpp.name }}(
            {% for param in method.parameters %}
                {{ param.cppcli.translator }}::ToCpp({{ param.cppcli.name }}){{ ", " if not loop.last }}
            {% endfor %}
            );
            {% if method.return_type_ref %}
            return {{ method.cppcli.translator }}::FromCpp(cpp_result);
            {% endif %}
        } DJINNI_TRANSLATE_EXCEPTIONS()
        {% if method.return_type_ref.type_def %}
        return {}; // Unreachable! (Silencing compiler warnings.)
        {% endif %}
        {% if method.deprecated and not type_def.deprecated %}
        #pragma warning( pop )
        {% endif %}
    }
    {% endfor %}

    CppType djinni_private_get_proxied_cpp_object() {
        return _cppRefHandle->get();
    }

private:
    AutoPtr<HandleType> _cppRefHandle;
};
{% endif %}
{% if 'cppcli' in type_def.targets %}
class {{ type_def.cppcli.name }}CsProxy : public {{ type_def.cpp.typename }} {
    using CsType = {{ type_def.cppcli.typename }}^;
    using CsRefType = ::pydjinni::CsRef<CsType>;
    using HandleType = ::pydjinni::CsProxyCache::Handle<::pydjinni::CsRef<CsType>>;
public:
    {{ type_def.cppcli.name }}CsProxy(CsRefType cs) : m_djinni_private_proxy_handle(std::move(cs)) {}
    {{ type_def.cppcli.name }}CsProxy(const ::pydjinni::CsRef<System::Object^>& ptr) : {{ type_def.cppcli.name }}CsProxy(CsRefType(dynamic_cast<CsType>(ptr.get()))) {}
    {% for method in type_def.methods %}

    {{ method.cpp.type_spec }} {{ method.cpp.name }}(
    {%- for param in method.parameters -%}
        {{ param.cpp.type_spec }} {{ param.cpp.name ~ (", " if not loop.last) }}
    {%- endfor -%}
    )
    {
        {% if method.deprecated and not type_def.deprecated %}
        #pragma warning( push )
        #pragma warning( disable : 4947 )
        {% endif %}
        {{ "auto cs_result = " if method.return_type_ref.type_def -}}
        djinni_private_get_proxied_cs_object()->{{ method.cppcli.name }}(
        {% for param in method.parameters %}
            {{ param.translator }}::FromCpp({{ param.cpp.name }}){{ "," if not loop.last }}
        {% endfor %}
        );
        {% if method.return_type_ref.type_def %}
        return {{ method.cppcli.translator }}::ToCpp(cs_result);
        {% endif %}
        {% if method.deprecated and not type_def.deprecated %}
        #pragma warning( pop )
        {% endif %}
    }
    {% endfor %}

    CsType djinni_private_get_proxied_cs_object() {
        return m_djinni_private_proxy_handle.get().get();
    }
private:
    HandleType m_djinni_private_proxy_handle;
};
{% endif %}

{{ type_def.cppcli.name }}::CppType {{ type_def.cppcli.name }}::ToCpp({{ type_def.cppcli.name }}::CsType cs)
{
    if(!cs) {
        return nullptr;
    }
    {% if 'cppcli' in type_def.targets %}
    {% if 'cpp' in type_def.targets %}
    if (auto cs_ref = dynamic_cast<{{ type_def.cppcli.name }}CppProxy^>(cs))
    {
        return cs_ref->djinni_private_get_proxied_cpp_object();
    }
    {% endif %}
    return ::pydjinni::get_cs_proxy<{{ type_def.cppcli.name }}CsProxy>(cs);
    {% else %}
    return dynamic_cast<{{ type_def.cppcli.name }}CppProxy^>(cs)->djinni_private_get_proxied_cpp_object();
    {% endif %}
}

{{ type_def.cppcli.name }}::CsType {{ type_def.cppcli.name }}::FromCppOpt(const {{ type_def.cppcli.name }}::CppOptType& cpp)
{
    if (!cpp) {
        return nullptr;
    }
    {% if 'cppcli' in type_def.targets %}
    {% if 'cpp' in type_def.targets %}
    if (auto cpp_ptr = dynamic_cast<{{ type_def.cppcli.name }}CsProxy*>(cpp.get())) {
        return cpp_ptr->djinni_private_get_proxied_cs_object();
    }
    return ::pydjinni::get_cpp_proxy<{{ type_def.cppcli.name }}CppProxy^>(cpp);
    {% else %}
    return dynamic_cast<{{ type_def.cppcli.name }}CsProxy*>(cpp.get())->djinni_private_get_proxied_cs_object();
    {% endif %}
    {% else %}
    return ::pydjinni::get_cpp_proxy<{{ type_def.cppcli.name }}CppProxy^>(cpp);
    {% endif %}
}
{% endblock %}
