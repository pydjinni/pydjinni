# Generated from Idl.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,247,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
        1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,
        1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
        5,26,198,8,26,10,26,12,26,201,9,26,1,26,1,26,1,27,1,27,4,27,207,
        8,27,11,27,12,27,208,1,28,1,28,5,28,213,8,28,10,28,12,28,216,9,28,
        1,29,4,29,219,8,29,11,29,12,29,220,1,29,1,29,1,30,1,30,5,30,227,
        8,30,10,30,12,30,230,9,30,1,31,1,31,1,31,5,31,235,8,31,10,31,12,
        31,238,9,31,1,31,1,31,1,32,1,32,3,32,244,8,32,1,33,1,33,1,199,0,
        34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,0,67,0,1,0,
        6,2,0,43,43,45,45,1,0,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,
        2,0,48,57,95,95,2,0,65,90,97,122,251,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,69,1,
        0,0,0,3,77,1,0,0,0,5,85,1,0,0,0,7,95,1,0,0,0,9,100,1,0,0,0,11,106,
        1,0,0,0,13,113,1,0,0,0,15,119,1,0,0,0,17,124,1,0,0,0,19,134,1,0,
        0,0,21,141,1,0,0,0,23,150,1,0,0,0,25,159,1,0,0,0,27,168,1,0,0,0,
        29,171,1,0,0,0,31,173,1,0,0,0,33,175,1,0,0,0,35,177,1,0,0,0,37,179,
        1,0,0,0,39,181,1,0,0,0,41,183,1,0,0,0,43,185,1,0,0,0,45,187,1,0,
        0,0,47,189,1,0,0,0,49,191,1,0,0,0,51,193,1,0,0,0,53,195,1,0,0,0,
        55,204,1,0,0,0,57,210,1,0,0,0,59,218,1,0,0,0,61,224,1,0,0,0,63,236,
        1,0,0,0,65,243,1,0,0,0,67,245,1,0,0,0,69,70,5,64,0,0,70,71,5,105,
        0,0,71,72,5,109,0,0,72,73,5,112,0,0,73,74,5,111,0,0,74,75,5,114,
        0,0,75,76,5,116,0,0,76,2,1,0,0,0,77,78,5,64,0,0,78,79,5,101,0,0,
        79,80,5,120,0,0,80,81,5,116,0,0,81,82,5,101,0,0,82,83,5,114,0,0,
        83,84,5,110,0,0,84,4,1,0,0,0,85,86,5,110,0,0,86,87,5,97,0,0,87,88,
        5,109,0,0,88,89,5,101,0,0,89,90,5,115,0,0,90,91,5,112,0,0,91,92,
        5,97,0,0,92,93,5,99,0,0,93,94,5,101,0,0,94,6,1,0,0,0,95,96,5,101,
        0,0,96,97,5,110,0,0,97,98,5,117,0,0,98,99,5,109,0,0,99,8,1,0,0,0,
        100,101,5,102,0,0,101,102,5,108,0,0,102,103,5,97,0,0,103,104,5,103,
        0,0,104,105,5,115,0,0,105,10,1,0,0,0,106,107,5,115,0,0,107,108,5,
        116,0,0,108,109,5,97,0,0,109,110,5,116,0,0,110,111,5,105,0,0,111,
        112,5,99,0,0,112,12,1,0,0,0,113,114,5,99,0,0,114,115,5,111,0,0,115,
        116,5,110,0,0,116,117,5,115,0,0,117,118,5,116,0,0,118,14,1,0,0,0,
        119,120,5,109,0,0,120,121,5,97,0,0,121,122,5,105,0,0,122,123,5,110,
        0,0,123,16,1,0,0,0,124,125,5,105,0,0,125,126,5,110,0,0,126,127,5,
        116,0,0,127,128,5,101,0,0,128,129,5,114,0,0,129,130,5,102,0,0,130,
        131,5,97,0,0,131,132,5,99,0,0,132,133,5,101,0,0,133,18,1,0,0,0,134,
        135,5,114,0,0,135,136,5,101,0,0,136,137,5,99,0,0,137,138,5,111,0,
        0,138,139,5,114,0,0,139,140,5,100,0,0,140,20,1,0,0,0,141,142,5,100,
        0,0,142,143,5,101,0,0,143,144,5,114,0,0,144,145,5,105,0,0,145,146,
        5,118,0,0,146,147,5,105,0,0,147,148,5,110,0,0,148,149,5,103,0,0,
        149,22,1,0,0,0,150,151,5,102,0,0,151,152,5,117,0,0,152,153,5,110,
        0,0,153,154,5,99,0,0,154,155,5,116,0,0,155,156,5,105,0,0,156,157,
        5,111,0,0,157,158,5,110,0,0,158,24,1,0,0,0,159,160,5,112,0,0,160,
        161,5,114,0,0,161,162,5,111,0,0,162,163,5,112,0,0,163,164,5,101,
        0,0,164,165,5,114,0,0,165,166,5,116,0,0,166,167,5,121,0,0,167,26,
        1,0,0,0,168,169,5,45,0,0,169,170,5,62,0,0,170,28,1,0,0,0,171,172,
        5,63,0,0,172,30,1,0,0,0,173,174,5,61,0,0,174,32,1,0,0,0,175,176,
        5,58,0,0,176,34,1,0,0,0,177,178,5,40,0,0,178,36,1,0,0,0,179,180,
        5,41,0,0,180,38,1,0,0,0,181,182,5,123,0,0,182,40,1,0,0,0,183,184,
        5,125,0,0,184,42,1,0,0,0,185,186,5,62,0,0,186,44,1,0,0,0,187,188,
        5,60,0,0,188,46,1,0,0,0,189,190,5,59,0,0,190,48,1,0,0,0,191,192,
        5,44,0,0,192,50,1,0,0,0,193,194,5,46,0,0,194,52,1,0,0,0,195,199,
        5,34,0,0,196,198,9,0,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,200,
        1,0,0,0,199,197,1,0,0,0,200,202,1,0,0,0,201,199,1,0,0,0,202,203,
        5,34,0,0,203,54,1,0,0,0,204,206,7,0,0,0,205,207,7,1,0,0,206,205,
        1,0,0,0,207,208,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,56,1,
        0,0,0,210,214,5,35,0,0,211,213,8,2,0,0,212,211,1,0,0,0,213,216,1,
        0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,58,1,0,0,0,216,214,1,0,
        0,0,217,219,7,3,0,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,
        0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,223,6,29,0,0,223,60,1,0,
        0,0,224,228,3,67,33,0,225,227,3,65,32,0,226,225,1,0,0,0,227,230,
        1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,62,1,0,0,0,230,228,1,
        0,0,0,231,232,3,61,30,0,232,233,5,46,0,0,233,235,1,0,0,0,234,231,
        1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,239,
        1,0,0,0,238,236,1,0,0,0,239,240,3,61,30,0,240,64,1,0,0,0,241,244,
        3,67,33,0,242,244,7,4,0,0,243,241,1,0,0,0,243,242,1,0,0,0,244,66,
        1,0,0,0,245,246,7,5,0,0,246,68,1,0,0,0,8,0,199,208,214,220,228,236,
        243,1,6,0,0
    ]

class IdlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IMPORT = 1
    EXTERN = 2
    NAMESPACE = 3
    ENUM = 4
    FLAGS = 5
    STATIC = 6
    CONST = 7
    MAIN = 8
    INTERFACE = 9
    RECORD = 10
    DERIVING = 11
    FUNCTION = 12
    PROPERTY = 13
    ARROW = 14
    OPTIONAL = 15
    ASSIGN = 16
    COLON = 17
    LPAREN = 18
    RPAREN = 19
    LBRACE = 20
    RBRACE = 21
    GT = 22
    LT = 23
    SEMI = 24
    COMMA = 25
    DOT = 26
    FILEPATH = 27
    TARGET = 28
    COMMENT = 29
    WS = 30
    ID = 31
    NS_ID = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@import'", "'@extern'", "'namespace'", "'enum'", "'flags'", 
            "'static'", "'const'", "'main'", "'interface'", "'record'", 
            "'deriving'", "'function'", "'property'", "'->'", "'?'", "'='", 
            "':'", "'('", "')'", "'{'", "'}'", "'>'", "'<'", "';'", "','", 
            "'.'" ]

    symbolicNames = [ "<INVALID>",
            "IMPORT", "EXTERN", "NAMESPACE", "ENUM", "FLAGS", "STATIC", 
            "CONST", "MAIN", "INTERFACE", "RECORD", "DERIVING", "FUNCTION", 
            "PROPERTY", "ARROW", "OPTIONAL", "ASSIGN", "COLON", "LPAREN", 
            "RPAREN", "LBRACE", "RBRACE", "GT", "LT", "SEMI", "COMMA", "DOT", 
            "FILEPATH", "TARGET", "COMMENT", "WS", "ID", "NS_ID" ]

    ruleNames = [ "IMPORT", "EXTERN", "NAMESPACE", "ENUM", "FLAGS", "STATIC", 
                  "CONST", "MAIN", "INTERFACE", "RECORD", "DERIVING", "FUNCTION", 
                  "PROPERTY", "ARROW", "OPTIONAL", "ASSIGN", "COLON", "LPAREN", 
                  "RPAREN", "LBRACE", "RBRACE", "GT", "LT", "SEMI", "COMMA", 
                  "DOT", "FILEPATH", "TARGET", "COMMENT", "WS", "ID", "NS_ID", 
                  "LetterOrDigit", "Letter" ]

    grammarFileName = "Idl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


