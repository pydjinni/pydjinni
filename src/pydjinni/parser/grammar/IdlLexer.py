# Generated from Idl.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,272,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,5,29,
        223,8,29,10,29,12,29,226,9,29,1,29,1,29,1,30,1,30,4,30,232,8,30,
        11,30,12,30,233,1,31,1,31,5,31,238,8,31,10,31,12,31,241,9,31,1,32,
        4,32,244,8,32,11,32,12,32,245,1,32,1,32,1,33,1,33,5,33,252,8,33,
        10,33,12,33,255,9,33,1,34,1,34,1,34,5,34,260,8,34,10,34,12,34,263,
        9,34,1,34,1,34,1,35,1,35,3,35,269,8,35,1,36,1,36,1,224,0,37,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,0,
        73,0,1,0,6,2,0,43,43,45,45,1,0,97,122,2,0,10,10,13,13,3,0,9,10,13,
        13,32,32,2,0,48,57,95,95,2,0,65,90,97,122,276,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,75,1,0,0,0,3,83,1,0,
        0,0,5,91,1,0,0,0,7,101,1,0,0,0,9,106,1,0,0,0,11,112,1,0,0,0,13,119,
        1,0,0,0,15,125,1,0,0,0,17,130,1,0,0,0,19,140,1,0,0,0,21,147,1,0,
        0,0,23,156,1,0,0,0,25,165,1,0,0,0,27,174,1,0,0,0,29,180,1,0,0,0,
        31,186,1,0,0,0,33,193,1,0,0,0,35,196,1,0,0,0,37,198,1,0,0,0,39,200,
        1,0,0,0,41,202,1,0,0,0,43,204,1,0,0,0,45,206,1,0,0,0,47,208,1,0,
        0,0,49,210,1,0,0,0,51,212,1,0,0,0,53,214,1,0,0,0,55,216,1,0,0,0,
        57,218,1,0,0,0,59,220,1,0,0,0,61,229,1,0,0,0,63,235,1,0,0,0,65,243,
        1,0,0,0,67,249,1,0,0,0,69,261,1,0,0,0,71,268,1,0,0,0,73,270,1,0,
        0,0,75,76,5,64,0,0,76,77,5,105,0,0,77,78,5,109,0,0,78,79,5,112,0,
        0,79,80,5,111,0,0,80,81,5,114,0,0,81,82,5,116,0,0,82,2,1,0,0,0,83,
        84,5,64,0,0,84,85,5,101,0,0,85,86,5,120,0,0,86,87,5,116,0,0,87,88,
        5,101,0,0,88,89,5,114,0,0,89,90,5,110,0,0,90,4,1,0,0,0,91,92,5,110,
        0,0,92,93,5,97,0,0,93,94,5,109,0,0,94,95,5,101,0,0,95,96,5,115,0,
        0,96,97,5,112,0,0,97,98,5,97,0,0,98,99,5,99,0,0,99,100,5,101,0,0,
        100,6,1,0,0,0,101,102,5,101,0,0,102,103,5,110,0,0,103,104,5,117,
        0,0,104,105,5,109,0,0,105,8,1,0,0,0,106,107,5,102,0,0,107,108,5,
        108,0,0,108,109,5,97,0,0,109,110,5,103,0,0,110,111,5,115,0,0,111,
        10,1,0,0,0,112,113,5,115,0,0,113,114,5,116,0,0,114,115,5,97,0,0,
        115,116,5,116,0,0,116,117,5,105,0,0,117,118,5,99,0,0,118,12,1,0,
        0,0,119,120,5,99,0,0,120,121,5,111,0,0,121,122,5,110,0,0,122,123,
        5,115,0,0,123,124,5,116,0,0,124,14,1,0,0,0,125,126,5,109,0,0,126,
        127,5,97,0,0,127,128,5,105,0,0,128,129,5,110,0,0,129,16,1,0,0,0,
        130,131,5,105,0,0,131,132,5,110,0,0,132,133,5,116,0,0,133,134,5,
        101,0,0,134,135,5,114,0,0,135,136,5,102,0,0,136,137,5,97,0,0,137,
        138,5,99,0,0,138,139,5,101,0,0,139,18,1,0,0,0,140,141,5,114,0,0,
        141,142,5,101,0,0,142,143,5,99,0,0,143,144,5,111,0,0,144,145,5,114,
        0,0,145,146,5,100,0,0,146,20,1,0,0,0,147,148,5,100,0,0,148,149,5,
        101,0,0,149,150,5,114,0,0,150,151,5,105,0,0,151,152,5,118,0,0,152,
        153,5,105,0,0,153,154,5,110,0,0,154,155,5,103,0,0,155,22,1,0,0,0,
        156,157,5,102,0,0,157,158,5,117,0,0,158,159,5,110,0,0,159,160,5,
        99,0,0,160,161,5,116,0,0,161,162,5,105,0,0,162,163,5,111,0,0,163,
        164,5,110,0,0,164,24,1,0,0,0,165,166,5,112,0,0,166,167,5,114,0,0,
        167,168,5,111,0,0,168,169,5,112,0,0,169,170,5,101,0,0,170,171,5,
        114,0,0,171,172,5,116,0,0,172,173,5,121,0,0,173,26,1,0,0,0,174,175,
        5,97,0,0,175,176,5,115,0,0,176,177,5,121,0,0,177,178,5,110,0,0,178,
        179,5,99,0,0,179,28,1,0,0,0,180,181,5,101,0,0,181,182,5,114,0,0,
        182,183,5,114,0,0,183,184,5,111,0,0,184,185,5,114,0,0,185,30,1,0,
        0,0,186,187,5,116,0,0,187,188,5,104,0,0,188,189,5,114,0,0,189,190,
        5,111,0,0,190,191,5,119,0,0,191,192,5,115,0,0,192,32,1,0,0,0,193,
        194,5,45,0,0,194,195,5,62,0,0,195,34,1,0,0,0,196,197,5,63,0,0,197,
        36,1,0,0,0,198,199,5,61,0,0,199,38,1,0,0,0,200,201,5,58,0,0,201,
        40,1,0,0,0,202,203,5,40,0,0,203,42,1,0,0,0,204,205,5,41,0,0,205,
        44,1,0,0,0,206,207,5,123,0,0,207,46,1,0,0,0,208,209,5,125,0,0,209,
        48,1,0,0,0,210,211,5,62,0,0,211,50,1,0,0,0,212,213,5,60,0,0,213,
        52,1,0,0,0,214,215,5,59,0,0,215,54,1,0,0,0,216,217,5,44,0,0,217,
        56,1,0,0,0,218,219,5,46,0,0,219,58,1,0,0,0,220,224,5,34,0,0,221,
        223,9,0,0,0,222,221,1,0,0,0,223,226,1,0,0,0,224,225,1,0,0,0,224,
        222,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,228,5,34,0,0,228,
        60,1,0,0,0,229,231,7,0,0,0,230,232,7,1,0,0,231,230,1,0,0,0,232,233,
        1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,62,1,0,0,0,235,239,5,
        35,0,0,236,238,8,2,0,0,237,236,1,0,0,0,238,241,1,0,0,0,239,237,1,
        0,0,0,239,240,1,0,0,0,240,64,1,0,0,0,241,239,1,0,0,0,242,244,7,3,
        0,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,1,0,0,0,245,246,1,0,
        0,0,246,247,1,0,0,0,247,248,6,32,0,0,248,66,1,0,0,0,249,253,3,73,
        36,0,250,252,3,71,35,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,
        0,0,0,253,254,1,0,0,0,254,68,1,0,0,0,255,253,1,0,0,0,256,257,3,67,
        33,0,257,258,5,46,0,0,258,260,1,0,0,0,259,256,1,0,0,0,260,263,1,
        0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,264,1,0,0,0,263,261,1,
        0,0,0,264,265,3,67,33,0,265,70,1,0,0,0,266,269,3,73,36,0,267,269,
        7,4,0,0,268,266,1,0,0,0,268,267,1,0,0,0,269,72,1,0,0,0,270,271,7,
        5,0,0,271,74,1,0,0,0,8,0,224,233,239,245,253,261,268,1,6,0,0
    ]

class IdlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IMPORT = 1
    EXTERN = 2
    NAMESPACE = 3
    ENUM = 4
    FLAGS = 5
    STATIC = 6
    CONST = 7
    MAIN = 8
    INTERFACE = 9
    RECORD = 10
    DERIVING = 11
    FUNCTION = 12
    PROPERTY = 13
    ASYNC = 14
    ERROR = 15
    THROWS = 16
    ARROW = 17
    OPTIONAL = 18
    ASSIGN = 19
    COLON = 20
    LPAREN = 21
    RPAREN = 22
    LBRACE = 23
    RBRACE = 24
    GT = 25
    LT = 26
    SEMI = 27
    COMMA = 28
    DOT = 29
    FILEPATH = 30
    TARGET = 31
    COMMENT = 32
    WS = 33
    ID = 34
    NS_ID = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@import'", "'@extern'", "'namespace'", "'enum'", "'flags'", 
            "'static'", "'const'", "'main'", "'interface'", "'record'", 
            "'deriving'", "'function'", "'property'", "'async'", "'error'", 
            "'throws'", "'->'", "'?'", "'='", "':'", "'('", "')'", "'{'", 
            "'}'", "'>'", "'<'", "';'", "','", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "IMPORT", "EXTERN", "NAMESPACE", "ENUM", "FLAGS", "STATIC", 
            "CONST", "MAIN", "INTERFACE", "RECORD", "DERIVING", "FUNCTION", 
            "PROPERTY", "ASYNC", "ERROR", "THROWS", "ARROW", "OPTIONAL", 
            "ASSIGN", "COLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "GT", 
            "LT", "SEMI", "COMMA", "DOT", "FILEPATH", "TARGET", "COMMENT", 
            "WS", "ID", "NS_ID" ]

    ruleNames = [ "IMPORT", "EXTERN", "NAMESPACE", "ENUM", "FLAGS", "STATIC", 
                  "CONST", "MAIN", "INTERFACE", "RECORD", "DERIVING", "FUNCTION", 
                  "PROPERTY", "ASYNC", "ERROR", "THROWS", "ARROW", "OPTIONAL", 
                  "ASSIGN", "COLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                  "GT", "LT", "SEMI", "COMMA", "DOT", "FILEPATH", "TARGET", 
                  "COMMENT", "WS", "ID", "NS_ID", "LetterOrDigit", "Letter" ]

    grammarFileName = "Idl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


